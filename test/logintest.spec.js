// Generated by Selenium IDE
const { Builder, By, WebElementCondition,Capabilities, until, Actions } = require("selenium-webdriver")
const testdata = require('./../objects/testData')
const assert = require("assert")
const loginpage = require('../pageobjects/loginpage');
const objt = require('../operations/ReadObjects');
const opertn = require('../operations/UIOperations');

let driver;

before(async function(){
    this.timeout(100000)
    driver = await loginpage.driver;
    //await this.driver.manage().setTimeouts({ implicit: 100000 });
    //await driver.get("https://ttl.lemnisk.co/app/login/")
    //await driver.get("https://cdp.lemnisk.co/app/login/")
    await driver.get(testdata.url.input.validurl)
    await driver.manage().window().setRect({ width: 1848, height: 1053 })
    return await driver;
});

describe('Testing login functionality', function() {
  this.timeout(100000)
  //let driver
  let vars
  let actions
  let prop
  beforeEach(async function() {
   // driver = await new Builder().forBrowser('chrome').build()
      // Navigate to the login page
   // vars = {}
  })
  afterEach(async function() {
    //await driver.quit();
  })
  it('login_test', async function() {
    this.timeout(1000000)
    await driver.manage().setTimeouts({ implicit: 100000 });
    await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
    const actualOutput = await driver.findElement(By.xpath("//div/h2[contains(text(),'Dashboard')]")).getText();
    console.log("the actual ouput is :"+actualOutput);
    const  expResult = testdata.username.expectedOutput.output.succMsg;
    console.log("the expected output is "+expResult)
    await loginpage.validate(actualOutput,expResult)
 /*    for (const key in testdata.username.input) {
      const value = testdata.username.input[key];
      console.log(`${key}:`, value)
    } */
  })

  it ('logout_test', async function() {
    this.timeout(1000000)
    await driver.manage().setTimeouts({ implicit: 1000000 });
    await loginpage.log_out(await driver)
    const actualOuput = await driver.findElement(By.xpath("//div[contains(text(),'Logged out successfully')]/..")).getText();
    console.log("the actual output is : "+actualOuput);
    const expResult = testdata.logOutMsg.expectedOutput.output.succMsg;
    console.log("the expected output is "+expResult)
    await loginpage.validate(actualOuput,expResult)
  })

  it.skip('segmentCreation_test', async function() {
   
    this.timeout(1000000)
    prop = await objt.getObjectRepository();
    await driver.manage().setTimeouts({ implicit: 1000000 });
    await opertn.perform(await prop,"CLICK","campaignMenuBtn","XPATH","");
    await opertn.perform(await prop,"CLICK","segmentsMenuBtn","XPATH","");
    await opertn.perform(await prop,"CLICK","addSegmentBtn","XPATH","");
    await opertn.perform(await prop,"CLICK","selectExistingUserSeg","XPATH","");
    await opertn.perform(await prop,"CLICK","creatSegmentBtn","XPATH","");
    await opertn.perform(await prop,"SETTEXT", "segmentNameTxtBox", "XPATH", "cdpTestSegment007")
    await opertn.perform(await prop,"SETTEXT", "segmentDescriptionTxtArea", "XPATH", "Test Segment description goes here")
    await opertn.perform(await prop,"CLICK","segmentPriorityDropDown","XPATH","");
    await opertn.perform(await prop,"WAIT", "", "", "5000")
    await opertn.perform(await prop,"SELECTITEM", "selectSgmtPriorityItem", "XPATH", "Highest")
    await opertn.perform(await prop,"CLICK", "segmentDimensionDropDown", "XPATH", "")
    await opertn.perform(await prop,"SELECTITEM", "selectSgmtDimesion", "XPATH", "Age")
    await opertn.perform(await prop,"WAIT", "", "", "5000")
    await opertn.perform(await prop,"CLICK", "segmentOperator", "XPATH", "")
    await opertn.perform(await prop,"WAIT", "", "", "5000")
    await opertn.perform(await prop,"SELECTITEM", "selectSgmtMenuOperator", "XPATH", "Lesser Than")
    await opertn.perform(await prop,"SETTEXT", "segmentRule1InpCondition", "XPATH", "35")
    await opertn.perform(await prop,"CLICK", "applyRuleBtn", "XPATH", "")
    await opertn.perform(await prop,"WAIT", "", "", "5000")
    await opertn.perform(await prop,"CLICK", "addRuleBtn", "XPATH", "")
    await opertn.perform(await prop,"CLICK", "segmentDimensionDropDown", "XPATH", "")
    await opertn.perform(await prop,"SELECTITEM", "selectSgmtDimesion", "XPATH", "Age")
    await opertn.perform(await prop,"CLICK", "segmentOperator", "XPATH", "")
    await opertn.perform(await prop,"WAIT", "", "", "5000")
    await opertn.perform(await prop,"SELECTITEM", "selectSgmtMenuOperator", "XPATH", "Lesser Than")
    await opertn.perform(await prop,"WAIT", "", "", "5000")
    await opertn.perform(await prop,"CLICK", "segmentRule1InpCondition", "XPATH", "")
    await opertn.perform(await prop,"SETTEXT", "segmentRule1InpCondition", "XPATH", "45")
    await opertn.perform(await prop,"CLICK", "applyRuleBtn", "XPATH", "")
    await opertn.perform(await prop,"CLICK", "saveSegmentBtn", "XPATH", "")
    await opertn.perform(await prop,"CLICK", "viewThisBtn", "XPATH", "")
  })

})


describe.skip('Test segment creation, updation, archiving', function() {
  this.timeout(1000000)
  let vars
  let actions
  let prop
  beforeEach(async function() {
    //driver = await new Builder().forBrowser('chrome').build()
      // Navigate to the login page
   // vars = {}
  })
  afterEach(async function() {
    //await driver.quit();
  }) 
  
  it('segmentCreation_test', async function() {
   
    this.timeout(1000000)
    prop = await objt.getObjectRepository();
    await driver.manage().setTimeouts({ implicit: 1000000 });
    //await opertn.perform(await prop,"CLICK","campaignMenuBtn","XPATH","");
    //await opertn.perform(await prop,"CLICK","segmentsMenuBtn","XPATH","");
    //await opertn.perform(await prop,"CLICK","addSegmentBtn","XPATH","");
    //await opertn.perform(await prop,"CLICK","selectExistingUserSeg","XPATH","");
    //await opertn.perform(await prop,"CLICK","creatSegmentBtn","XPATH","");
    //segmentlistpage.clickONAddSementBtn();
    await opertn.perform(await prop,"SETTEXT", "segmentNameTxtBox", "XPATH", "cdpTestSegment0010")
    await opertn.perform(await prop,"SETTEXT", "segmentDescriptionTxtArea", "XPATH", "Test Segment description goes here")
    await opertn.perform(await prop,"CLICK","segmentPriorityDropDown","XPATH","");
    await opertn.perform(await prop,"WAIT", "", "", "5000")
    await opertn.perform(await prop,"SELECTITEM", "selectSgmtPriorityItem", "XPATH", "Highest")
    await opertn.perform(await prop,"CLICK", "segmentDimensionDropDown", "XPATH", "")
    await opertn.perform(await prop,"SELECTITEM", "selectSgmtDimesion", "XPATH", "Age")
    await opertn.perform(await prop,"WAIT", "", "", "5000")
    await opertn.perform(await prop,"CLICK", "segmentOperator", "XPATH", "")
    await opertn.perform(await prop,"WAIT", "", "", "5000")
    await opertn.perform(await prop,"SELECTITEM", "selectSgmtMenuOperator", "XPATH", "Lesser Than")
    await opertn.perform(await prop,"SETTEXT", "segmentRule1InpCondition", "XPATH", "35")
    await opertn.perform(await prop,"CLICK", "applyRuleBtn", "XPATH", "")
    await opertn.perform(await prop,"WAIT", "", "", "5000")
    await opertn.perform(await prop,"CLICK", "addRuleBtn", "XPATH", "")
    await opertn.perform(await prop,"CLICK", "segmentDimensionDropDown", "XPATH", "")
    await opertn.perform(await prop,"SELECTITEM", "selectSgmtDimesion", "XPATH", "Age")
    await opertn.perform(await prop,"CLICK", "segmentOperator", "XPATH", "")
    await opertn.perform(await prop,"WAIT", "", "", "5000")
    await opertn.perform(await prop,"SELECTITEM", "selectSgmtMenuOperator", "XPATH", "Lesser Than")
    await opertn.perform(await prop,"WAIT", "", "", "5000")
    await opertn.perform(await prop,"CLICK", "segmentRule1InpCondition", "XPATH", "")
    await opertn.perform(await prop,"SETTEXT", "segmentRule1InpCondition", "XPATH", "45")
    await opertn.perform(await prop,"CLICK", "applyRuleBtn", "XPATH", "")
    await opertn.perform(await prop,"CLICK", "saveSegmentBtn", "XPATH", "")
    await opertn.perform(await prop,"CLICK", "viewThisBtn", "XPATH", "")
  })
  
})
