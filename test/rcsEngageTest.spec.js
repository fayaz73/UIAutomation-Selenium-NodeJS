require('../pageobjects/fast-selenium'); // imports the fast-selenium script
// Generated by Selenium IDE
const { Builder, By, WebElementCondition,Capabilities, until, Actions } = require("selenium-webdriver")
const testdata = require('./../objects/testData')
const assert = require("assert")
const loginpage = require('../pageobjects/loginpage');
const segmentlistpage = require('../pageobjects/segmentlistpage')
const channellistpage = require ('../pageobjects/channellistpage')
const rcsEngageCreate = require('../pageobjects/rcsEngagementCreationPage')
const segmentCreationPage = require('../pageobjects/segmentCreationPage')
const smsEngageCreate = require ('../pageobjects/smsEngagementCreationPage')
const { drive } = require("googleapis/build/src/apis/drive");
const objt = require('../operations/ReadObjects');
const opertn = require('../operations/UIOperations');
const { allure } = require("allure-mocha/runtime");
const rcsTestdata = require('./../objects/rcsTestData')


let driver;
let channellstpge;
let rcsEngCreate;

before(async function(){
    this.timeout(1000000)
    //this.driver = await BasePage.driver;
    driver = await segmentCreationPage.driver;

    //await this.driver.manage().setTimeouts({ implicit: 100000 });
    //await driver.get("https://ttl.lemnisk.co/app/login/")
    //await driver.get("https://cdp.lemnisk.co/app/login/")
    await driver.get(testdata.url.input.validurl)
    await driver.manage().window().setRect({ width: 1848, height: 1053 })
    channellstpge= new channellistpage(await driver);
    rcsEngCreate = new rcsEngageCreate(await driver);
    return await driver;
});

//================================rcs engagement with mandatory and content of type text=================================

describe ('Testing Creation of rcs engagement from channel flow', function() {
  this.timeout(3000000)
  //let driver
  let vars
  let actions
  let prop
  var EngageName = "RCSEngagmentTest77"
  var SegmentName = "cdpTestSegment0020"
  
  beforeEach(async function() {
    try {
      await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
      //await segmentlistpage.selectAndOpenSegment("92864",await this.driver);
      await channellstpge.clickONChannelTab();
      await channellstpge.clickOnSpecificChannel('RCS');
    } catch (error) {
      // Log the error or handle it as needed
      console.error("Test failed:", error);
    }
  })
  afterEach(async function() {
      //await this.driver.close();
      await loginpage.log_out(await driver);
      EngageName = "RCSEngagmentTest77";
  })

  it ('RCS_testCreatRCSEngageofGoalTypeTrack', async function() {
   
    this.timeout(600000)
    //prop = await objt.getObjectRepository();
    //await this.driver.manage().setTimeouts({ implicit: 1000000 });
    
    try {
      console.log("inside first it test case")
      EngageName = EngageName+"track";
      await allure.step("clickAddEngagement",async() => {
        await channellstpge.clickAddEngagement();
      });
      await allure.step("selectSegment",async() => {
        await channellstpge.selectSegment(SegmentName);
      });
      await allure.step("createRCSEngagementOfGoalTypeTrack",async() => {
        await rcsEngCreate.createRCSEngagementOfGoalTypeTrack(EngageName);
      });
      await allure.step("validating",async() => {
        const tabObjarray = new Array("addAGoalTab", "configureParamTab");
        const elemsObjarray = new Array("goalInput", "mandatoryParamInput2","contentTagsInput1","contentTagsInput3","contentAttributeInput1","contentAttributeInput3");
        const actualOParray = new Array("Application Backgrounded","123456Mandatory-_=+!@#$%^&*123456MandatoryParameter","123456Mandatory-_=+!@#$%^&*123456MandatoryParameter","123456Mandatory-_=+!@#$%^&*123456MandatoryParameter","123456Mandatory-_=+!@#$%^&*123456MandatoryParameter","123456Mandatory-_=+!@#$%^&*123456MandatoryParameter")
        //await rcsEngCreate.validating("addAGoalTab","goalTypeDropDown","Application Backgrounded",EngageName);
        await rcsEngCreate.validating(tabObjarray,elemsObjarray,actualOParray,EngageName);
      });

    } catch (error) {
      // Log the error or handle it as needed
      console.error("Test failed:", error);
      //await loginpage.log_out(driver);
    }
  })

  it.skip ('RCS_testUpdatingRCSEngageofGoalTypeTrack', async function() {
   
    this.timeout(600000)
    
    /* await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
    await channellistpage.clickONChannelTab();
    await channellistpage.clickOnSpecificChannel('RCS'); */

    try {
      EngageName = EngageName+"track";
      await allure.step("searchAndOpenEngagement",async() => {
        const engagementId = await channellstpge.getEngageId(EngageName);
        await channellstpge.searchAndOpenEngagement(engagementId);    
      });
      await allure.step("updateRCSEngagementOfGoalTypeTrack",async() => {
        await rcsEngCreate.updateRCSEngagementOfGoalTypeTrack("Application Backgrounded");
      });

      await allure.step("clickOnSpecificChannel", async() => {
        await channellstpge.clickONChannelTab();
        await channellstpge.clickOnSpecificChannel('RCS');
      });

      await allure.step("validating",async() => {
        await rcsEngCreate.validating("addAGoalTab","goalInput","Application Backgrounded",EngageName);
      });
    } catch (error) {
      // Log the error or handle it as needed
      console.error("Test failed:", error);
      //await loginpage.log_out(driver);
    }
  })

  it.skip ('RCS_testCopyingRCSEngageofGoalTypeTrack', async function() {
   
    this.timeout(600000)
    
    /* await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
    await channellistpage.clickONChannelTab();
    await channellistpage.clickOnSpecificChannel('RCS'); */
    try {
      EngageName = EngageName+"track";
      await allure.step("searchAndCopyEngagement",async() => {
        const engagementId = await channellstpge.getEngageId(EngageName);
        console.log("Engagement id is : "+engagementId);
        await channellstpge.searchAndCopyEngagement(engagementId);
      });
      await allure.step("selectSegment",async() => {
        await channellstpge.selectSegment(SegmentName);    
      });
      await allure.step("copyRCSEngagementOfGoalTypeTrack",async() => {
        EngageName = EngageName+"cpy"
        await rcsEngCreate.copyRCSEngagementOfGoalTypeTrack("Application Backgrounded",EngageName);    
      });
      await allure.step("validating",async() => {
        await rcsEngCreate.validating("addAGoalTab","goalInput","Application Backgrounded",EngageName);    
      });
    } catch (error) {
      // Log the error or handle it as needed
      console.error("Test failed:", error);
      //await loginpage.log_out(driver);
    }

  })


  it.skip ('RCS_testCreatRCSEngageofGoalTypePage', async function() {
   
    this.timeout(600000)

    /* await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
    await channellistpage.clickONChannelTab();
    await channellistpage.clickOnSpecificChannel('RCS'); */
    try {
      EngageName = EngageName+"Page";
      await allure.step("clickAddEngagement",async() => {
        await channellstpge.clickAddEngagement();    
      });

      await allure.step("selectSegment",async() => {
        await channellstpge.selectSegment(SegmentName);    
      });

      await allure.step("createRCSEngagementOfGoalTypePage",async() => {
        await rcsEngCreate.createRCSEngagementOfGoalTypePage("https://www.iciciprulife.com",EngageName);    
      });

      await allure.step("validating",async() => {
        await rcsEngCreate.validating("addAGoalTab","pageUrlInput","https://www.goog16le.com",EngageName);    
      });
    } catch (error) {
      // Log the error or handle it as needed
      console.error("Test failed:", error);
      //await loginpage.log_out(driver);
    }
  })

  it.skip ('RCS_testUpdatingRCSEngageofGoalTypePage', async function() {
   
    this.timeout(600000)

    /* await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
    await channellistpage.clickONChannelTab();
    await channellistpage.clickOnSpecificChannel('RCS'); */
    try {
      EngageName = EngageName+"Page";
      await allure.step("searchAndOpenEngagement",async() => {
        const engagementId = await channellstpge.getEngageId(EngageName);
        await channellstpge.searchAndOpenEngagement(engagementId);     
      });

      await allure.step("updateRCSEngagementOfGoalTypePage",async() => {
        await rcsEngCreate.updateRCSEngagementOfGoalTypePage("https://www.google.com",EngageName);    
      });

      await allure.step("clickOnSpecificChannel", async() => {
        await channellstpge.clickONChannelTab();
        await channellstpge.clickOnSpecificChannel('RCS');
      });

      await allure.step("validating",async() => {
        await rcsEngCreate.validating("addAGoalTab","pageUrlInput","https://www.goog16le.com",EngageName);    
      });
      
    } catch (error) {
      // Log the error or handle it as needed
      console.error("Test failed:", error);
      //await loginpage.log_out(driver);
    }
  })

  it.skip ('RCS_testCopyingRCSEngageofGoalTypePage', async function() {
   
    this.timeout(600000)
   
    /* await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
    await channellistpage.clickONChannelTab();
    await channellistpage.clickOnSpecificChannel('RCS'); */

    try {
      EngageName = EngageName+"Page";

      await allure.step("searchAndCopyEngagement",async() => {
        const engagementId = await channellstpge.getEngageId(EngageName);
        console.log("Engagement id is : "+engagementId);
        await channellstpge.searchAndCopyEngagement(engagementId);     
      });

      await allure.step("selectSegment",async() => {
        await channellstpge.selectSegment(SegmentName);    
      });

      await allure.step("copyRCSEngagementOfGoalTypePage",async() => {
        EngageName = EngageName+"cpy";
        await rcsEngCreate.copyRCSEngagementOfGoalTypePage("https://www.goog16le.com",EngageName);    
      });

      await allure.step("validating",async() => {
        await rcsEngCreate.validating("addAGoalTab","pageUrlInput","https://www.goog16le.com",EngageName);    
      });

    } catch (error) {
      // Log the error or handle it as needed
      console.error("Test failed:", error);
      //await loginpage.log_out(driver);
    }

  })



  it.skip ('RCS_testCreatRCSEngageofGoalTypeNone', async function() {
   
    this.timeout(600000)
  
    /* await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await this.driver);
    await channellistpage.clickONChannelTab();
    await channellistpage.clickOnSpecificChannel('RCS'); */
    try {

      EngageName = EngageName+"None";
      await allure.step("clickAddEngagement",async() => {
        await channellstpge.clickAddEngagement();    
      });

      await allure.step("selectSegment",async() => {
        await channellstpge.selectSegment(SegmentName);    
      });

      await allure.step("createRCSEngagementOfGoalTypeNone",async() => {
        await rcsEngCreate.createRCSEngagementOfGoalTypeNone();    
      });

      await allure.step("validating",async() => {
        await rcsEngCreate.validating("addAGoalTab","goalTypeDropDown","None",EngageName);    
      });

    } catch (error) {
      // Log the error or handle it as needed
      console.error("Test failed:", error);
      //await loginpage.log_out(driver);
    }
    
  })

  it.skip ('RCS_testUpdateRCSEngageofGoalTypeNone', async function() {
   
    this.timeout(600000)
  
    /* await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await this.driver);
    await channellistpage.clickONChannelTab();
    await channellistpage.clickOnSpecificChannel('RCS'); */
    try
    {
      EngageName = EngageName+"None";

      await allure.step("searchAndOpenEngagement",async() => {
        const engagementId = await channellstpge.getEngageId(EngageName);
        await channellstpge.searchAndOpenEngagement(engagementId);    
      });

      await allure.step("updateRCSEngagementOfGoalTypeNone",async() => {
        await rcsEngCreate.updateRCSEngagementOfGoalTypeNone();    
      });

      await allure.step("clickOnSpecificChannel", async() => {
        await channellstpge.clickONChannelTab();
        await channellstpge.clickOnSpecificChannel('RCS');
      });

      await allure.step("Validating",async() => {
        await rcsEngCreate.validating("addAGoalTab","goalTypeDropDown","None",EngageName);    
      });

    } catch (error) {
      // Log the error or handle it as needed
      console.error("Test failed:", error);
      //await loginpage.log_out(driver);
    }
    
    
  })

  it.skip ('RCS_testCopyingRCSEngageofGoalTypeNone', async function() {
   
    this.timeout(600000)
   
    /* await loginpage.log_in(testdata.await rcsEngCreate.validating("goalTypeDropDown","None",EngageName);username.input.validusername, testdata.password.input.validpassword,await driver);
    await channellistpage.clickONChannelTab();
    await channellistpage.clickOnSpecificChannel('RCS'); */
    try
    {
      EngageName = EngageName+"None";

      await allure.step("searchAndCopyEngagement",async() => {
        const engagementId = await channellstpge.getEngageId(EngageName);
        console.log("Engagement id is : "+engagementId);
        await channellstpge.searchAndCopyEngagement(engagementId);    
      });

      await allure.step("selectSegment",async() => {
        await channellstpge.selectSegment(SegmentName);    
      });

      await allure.step("copyRCSEngagementOfGoalTypeNone",async() => {
        EngageName = EngageName+"cpy";
        await rcsEngCreate.copyRCSEngagementOfGoalTypeNone(EngageName);    
      });

      await allure.step("validating",async() => {
        await rcsEngCreate.validating("addAGoalTab","goalTypeDropDown","None",EngageName);    
      });

    } catch(error) {
      // Log the error or handle it as needed
      console.error("Test failed:", error);
      //await loginpage.log_out(driver);
    }
    
  })

})

describe.skip ('RCS_testCreatRCSEngage_OnlyMandatoryParam', function() {

  this.timeout(5000000)
  //let driver
  let vars
  let actions
  let prop
  //const EngageName = "RCSEngagmentTet005"
  const SegmentName = "TestsegmentBetween"
  
  beforeEach(async function() {
    
      try {
        allure.parameter("login with username: ",testdata.username.input.validusername);
        await allure.step("loginStep",async() => {
          await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
        });
        //await segmentlistpage.selectAndOpenSegment("92864",await this.driver);
        //await channellistpage.clickONChannelTab();
        await allure.step("clickOnChannelTab",async() => {
         // await channellistpage.clickONChannelTab(await driver);
         await channellstpge.clickONChannelTab();
        });
  
        //await channellistpage.clickOnSpecificChannel('RCS');
        await allure.step("clickOnSpecificChannel",async() => {
          //await channellistpage.clickOnSpecificChannel('RCS',await driver);
          await channellstpge.clickOnSpecificChannel('RCS');
        });
      } catch (error) {
        console.error("Test failed:", error);
      }
  })
  afterEach(async function() {
      //await this.driver.close();
      await loginpage.log_out(await driver);
  })


  for (const mandtryParameter in rcsTestdata.rcsEngageInput.input.validMandatory) {


    it (`RCS_testCreatRCSEngage_OnlyMandatoryParam as ${mandtryParameter}`, async() => {
    
      this.timeout(5000000)
     // await driver.manage().setTimeouts({implicit: 1000000 });
      //prop = await objt.getObjectRepository();
      //await this.driver.manage().setTimeouts({ implicit: 1000000 });
      /* allure.parameter("login with username: ",testdata.username.input.validusername);
      await allure.step("loginStep",async() => {
        await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
      });
      //await segmentlistpage.selectAndOpenSegment("92864",await this.driver);
      //await channellistpage.clickONChannelTab();
      await allure.step("clickOnChannelTab",async() => {
       // await channellistpage.clickONChannelTab(await driver);
       await channellstpge.clickONChannelTab();
      });

      //await channellistpage.clickOnSpecificChannel('RCS');
      await allure.step("clickOnSpecificChannel",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        await channellstpge.clickOnSpecificChannel('RCS');
      }); */

      //await channellistpage.clickAddEngagement();
      try {
        await allure.step("clickAddEngagement",async() => {
          //await channellistpage.clickOnAddEngBtn(await driver);
          await channellstpge.clickOnAddEngBtn();
        });
  
        //await channellistpage.selectSegment("testsegment-hcl");
        await allure.step("selectSegment",async() => {
          //await channellistpage.selectSegment("testsegment-hcl",await driver);
          await channellstpge.selectSegment(SegmentName);
        });
  
        //await rcsEngageCreate.createRCSEngagementWithOnlyMandatoryParam(mandtryParameter);
        allure.parameter("Mandatory Parameter: ",testdata.rcsEngageInput.input.validMandatory[mandtryParameter]);
          await allure.step("createRCSEngagementWithOnlyMandatoryParam",async() => {
          await rcsEngCreate.createRCSEngagementWithOnlyMandatoryParam(rcsTestdata.rcsEngageInput.input.validMandatory[mandtryParameter],mandtryParameter);
        });
  
        await allure.step("validating",async() => {
          /* const tabObjarray = new Array("configureParamTab");
          const elemsObjarray = new Array("mandatoryParamInput2","contentTagsInput1","contentTagsInput3","contentAttributeInput1","contentAttributeInput3");
          const actualOParray = new Array();
          // Add elements to the array
          //actualOParray.push("Application Backgrounded");
          // Assuming tempp is a variable containing a value
          const tempp = rcsTestdata.rcsEngageInput.input.validMandatory[mandtryParameter];
          const EngageName = mandtryParameter;
          actualOParray.push(tempp);
          // Add the next five positions as specified
          actualOParray.push(
            "123456Mandatory-_=+!@#$%^&*123456MandatoryParameter",
            // Add four more positions with the same value
            "123456Mandatory-_=+!@#$%^&*123456MandatoryParameter",
            "123456Mandatory-_=+!@#$%^&*123456MandatoryParameter",
            "123456Mandatory-_=+!@#$%^&*123456MandatoryParameter",
            "123456Mandatory-_=+!@#$%^&*123456MandatoryParameter"
          ); */
          //await rcsEngCreate.validating(tabObjarray,elemsObjarray,actualOParray,EngageName);
          //await rcsEngCreate.validating("ConfigureParamExpandArrowBtn","mandatoryParamInput2",rcsTestdata.rcsEngageInput.input.validMandatory[mandtryParameter],mandtryParameter);
          const EngageName = mandtryParameter;
          const myConfig = {
            "configureParamTab": {
              "mandatoryParamInput2": rcsTestdata.rcsEngageInput.input.validMandatory[mandtryParameter],
              "contentTagsInput1": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter",
              "contentTagsInput3": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter",
              "contentAttributeInput1": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter",
              "contentAttributeInput3": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter"
            }
          };
          await rcsEngCreate.validating(myConfig,EngageName);

        });
  
        /* await allure.step("logOut",async() => {
          await loginpage.log_out(await driver)
        }); */
      } catch (error) {
          console.error("Test failed:", error);
      }

    });

  }

})


describe.skip ('RCS_testUpdateRCSEngage_OnlyMandatoryParam', function() {

  this.timeout(5000000)
  //let driver
  let vars
  let actions
  let prop
  const EngageName = "RCSEngagmentTet005"
  const SegmentName = "TestsegmentBetween"
  //channellstpge = new channellistpage(driver);
  beforeEach(async function() {
    
    try {
      allure.parameter("login with username: ",testdata.username.input.validusername);
      await allure.step("loginStep",async() => {
        await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
      });
      //await segmentlistpage.selectAndOpenSegment("92864",await this.driver);
      //await channellistpage.clickONChannelTab();
      await allure.step("clickOnChannelTab",async() => {
       // await channellistpage.clickONChannelTab(await driver);
       await channellstpge.clickONChannelTab();
      });
  
      //await channellistpage.clickOnSpecificChannel('RCS');
      await allure.step("clickOnSpecificChannel",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        await channellstpge.clickOnSpecificChannel('RCS');
      });
    } catch (error) {
      console.log(error)
    }
})

  afterEach(async function() {
    await loginpage.log_out(await driver);
      //await this.driver.close();
  })

  for (const mandtryParameter in rcsTestdata.rcsEngageInput.input.validMandatory) {

    it.skip (`RCS_testUpdateRCSEngage_OnlyMandatoryParam as ${mandtryParameter}`, async() => {
    
      this.timeout(5000000)
      const engid="";
     // await driver.manage().setTimeouts({implicit: 1000000 });
      //prop = await objt.getObjectRepository();
      //await this.driver.manage().setTimeouts({ implicit: 1000000 });
      /* allure.parameter("login with username: ",testdata.username.input.validusername);
      await allure.step("loginStep",async() => {
        await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
      });
      //await segmentlistpage.selectAndOpenSegment("92864",await this.driver);
      //await channellistpage.clickONChannelTab();
      await allure.step("clickOnChannelTab",async() => {
       // await channellistpage.clickONChannelTab(await driver);
       await channellstpge.clickONChannelTab();
      });

      //await channellistpage.clickOnSpecificChannel('RCS');
      await allure.step("clickOnSpecificChannel",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        await channellstpge.clickOnSpecificChannel('RCS');
      }); */

      //await channellistpage.clickOnSpecificChannel('RCS');
      /* await allure.step("getEngageId",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        engid = await channellstpge.getEngageId(mandtryParameter);
      }); */

      //await channellistpage.clickOnSpecificChannel('RCS');
      try {
        await allure.step("searchAndOpenEngagement2",async() => {
          //await channellistpage.clickOnSpecificChannel('RCS',await driver);
          await channellstpge.searchAndOpenEngagement2(await channellstpge.getEngageId(mandtryParameter));
        });
  

        //await rcsEngageCreate.createRCSEngagementWithOnlyMandatoryParam(mandtryParameter);
        allure.parameter("Mandatory Parameter: ",rcsTestdata.rcsEngageInput.input.validMandatory[mandtryParameter]);
        await allure.step("updateRCSEngagementWithOnlyMandatoryParam",async() => {
          await rcsEngCreate.updateRCSEngagementWithOnlyMandatoryParam(rcsTestdata.rcsEngageInput.input.validMandatory[mandtryParameter],mandtryParameter);
        });

        await allure.step("clickOnSpecificChannel", async() => {
          await channellstpge.clickONChannelTab();
          await channellstpge.clickOnSpecificChannel('RCS');
        });
  
        await allure.step("validating",async() => {

          const EngageName = mandtryParameter;
          const myConfig = {
            "configureParamTab": {
              "mandatoryParamInput2": rcsTestdata.rcsEngageInput.input.validMandatory[mandtryParameter],
              "contentTagsInput1": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter",
              "contentTagsInput3": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter",
              "contentAttributeInput1": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter",
              "contentAttributeInput3": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter"
            }
          };
          await rcsEngCreate.validating(myConfig,EngageName);

          //await rcsEngCreate.validating("ConfigureParamExpandArrowBtn","mandatoryParamInput2",rcsTestdata.rcsEngageInput.input.validMandatory[mandtryParameter],mandtryParameter);
        });
      } catch (error) {
        
      }

    });

  }
  

})

describe.skip ('RCS_testCopyRCSEngage_OnlyMandatoryParam', function() {

  this.timeout(5000000)
  //let driver
  let vars
  let actions
  let prop
  const EngageName = "RCSEngagmentTet005"
  const SegmentName = "TestsegmentBetween"
  //channellstpge = new channellistpage(driver);
  beforeEach(async function() {
    
    try {
      allure.parameter("login with username: ",testdata.username.input.validusername);
      await allure.step("loginStep",async() => {
        await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
      });
      //await segmentlistpage.selectAndOpenSegment("92864",await this.driver);
      //await channellistpage.clickONChannelTab();
      await allure.step("clickOnChannelTab",async() => {
       // await channellistpage.clickONChannelTab(await driver);
       await channellstpge.clickONChannelTab();
      });
  
      //await channellistpage.clickOnSpecificChannel('RCS');
      await allure.step("clickOnSpecificChannel",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        await channellstpge.clickOnSpecificChannel('RCS');
      });
    } catch (error) {
      console.log(error)
    }
  })
  afterEach(async function() {
      //await this.driver.close();
      await loginpage.log_out(await driver);
  })

  for (const mandtryParameter in rcsTestdata.rcsEngageInput.input.validMandatory) {

    it (`RCS_testCopyRCSEngage_OnlyMandatoryParam as ${mandtryParameter}`, async() => {
    
      this.timeout(5000000)
      /* const engid="";
     // await driver.manage().setTimeouts({implicit: 1000000 });
      //prop = await objt.getObjectRepository();
      //await this.driver.manage().setTimeouts({ implicit: 1000000 });
      allure.parameter("login with username: ",testdata.username.input.validusername);
      await allure.step("loginStep",async() => {
        await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
      });
      //await segmentlistpage.selectAndOpenSegment("92864",await this.driver);
      //await channellistpage.clickONChannelTab();
      await allure.step("clickOnChannelTab",async() => {
       // await channellistpage.clickONChannelTab(await driver);
       await channellstpge.clickONChannelTab();
      });

      //await channellistpage.clickOnSpecificChannel('RCS');
      await allure.step("clickOnSpecificChannel",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        await channellstpge.clickOnSpecificChannel('RCS');
      }); */

      //await channellistpage.clickOnSpecificChannel('RCS');
      /* await allure.step("getEngageId",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        engid = await channellstpge.getEngageId(mandtryParameter);
      }); */

      try {
        //await channellistpage.clickOnSpecificChannel('RCS');
        await allure.step("searchAndCopyEngagement",async() => {
          //await channellistpage.clickOnSpecificChannel('RCS',await driver);
          await channellstpge.searchAndCopyEngagement(await channellstpge.getEngageId(mandtryParameter));
        });
  
        await allure.step("searchAndCopyEngagement",async() => {
          await channellstpge.selectSegment(SegmentName);
        });
  
        
        //await rcsEngageCreate.createRCSEngagementWithOnlyMandatoryParam(mandtryParameter);
        allure.parameter("Mandatory Parameter: ",rcsTestdata.rcsEngageInput.input.validMandatory[mandtryParameter]);
        await allure.step("copyRCSEngagementWithOnlyMandatoryParam",async() => {
          await rcsEngCreate.copyRCSEngagementWithOnlyMandatoryParam(rcsTestdata.rcsEngageInput.input.validMandatory[mandtryParameter],mandtryParameter);
        });
  
        await allure.step("validating",async() => {

          const EngageName = mandtryParameter;
          const myConfig = {
            "configureParamTab": {
              "mandatoryParamInput2": rcsTestdata.rcsEngageInput.input.validMandatory[mandtryParameter],
              "contentTagsInput1": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter",
              "contentTagsInput3": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter",
              "contentAttributeInput1": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter",
              "contentAttributeInput3": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter"
            }
          };
          await rcsEngCreate.validating(myConfig,EngageName);

          //await rcsEngCreate.validating("ConfigureParamExpandArrowBtn","mandatoryParamInput2",rcsTestdata.rcsEngageInput.input.validMandatory[mandtryParameter],mandtryParameter+"cpy");
        });
      } catch (error) {
        
      }

    });

  }
  

})


describe.skip ('RCS_testCreateRCSEngage_OnlyContentTags', function() {

  this.timeout(5000000)
  //let driver
  let vars
  let actions
  let prop
  const EngageName = "RCSEngagmentTet005"
  const SegmentName = "TestsegmentBetween"
  //channellstpge = new channellistpage(driver);
  beforeEach(async function() {
    
    try {
      allure.parameter("login with username: ",testdata.username.input.validusername);
      await allure.step("loginStep",async() => {
        await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
      });
      //await segmentlistpage.selectAndOpenSegment("92864",await this.driver);
      //await channellistpage.clickONChannelTab();
      await allure.step("clickOnChannelTab",async() => {
       // await channellistpage.clickONChannelTab(await driver);
       await channellstpge.clickONChannelTab();
      });
  
      //await channellistpage.clickOnSpecificChannel('RCS');
      await allure.step("clickOnSpecificChannel",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        await channellstpge.clickOnSpecificChannel('RCS');
      });
    } catch (error) {
      console.log(error)
    }
  })
  afterEach(async function() {
      //await this.driver.close();
      await loginpage.log_out(await driver);
  })

  for (const contentTagInput in rcsTestdata.rcsEngageContentTagInput.input.validContentTag) {
    it.skip (`RCS_testCreateRCSEngage_OnlyContentTags as ${contentTagInput}`, async () => {
      
      this.timeout(5000000)
     // await driver.manage().setTimeouts({implicit: 1000000 });
      //prop = await objt.getObjectRepository();
      //await this.driver.manage().setTimeouts({ implicit: 1000000 });
      /* allure.parameter("login with username: ",testdata.username.input.validusername);
      await allure.step("loginStep",async() => {
        await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
      });
      //await segmentlistpage.selectAndOpenSegment("92864",await this.driver);
      //await channellistpage.clickONChannelTab();
      await allure.step("clickOnChannelTab",async() => {
       // await channellistpage.clickONChannelTab(await driver);
       await channellstpge.clickONChannelTab();
      });

      //await channellistpage.clickOnSpecificChannel('RCS');
      await allure.step("clickOnSpecificChannel",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        await channellstpge.clickOnSpecificChannel('RCS');
      }); */

      try {
        //await channellistpage.clickAddEngagement();
        await allure.step("clickAddEngagement",async() => {
          //await channellistpage.clickOnAddEngBtn(await driver);
          await channellstpge.clickOnAddEngBtn();
        });
  
        //await channellistpage.selectSegment("testsegment-hcl");
        await allure.step("selectSegment",async() => {
          //await channellistpage.selectSegment("testsegment-hcl",await driver);
          await channellstpge.selectSegment(SegmentName);
        });
  
        //await rcsEngageCreate.createRCSEngagementWithOnlyMandatoryParam(mandtryParameter);
        allure.parameter("Content tags: ",rcsTestdata.rcsEngageContentTagInput.input.validMandatory[contentTagInput]);
        await allure.step("createRCSEngagementWithOnlyContentTags",async() => {
          await rcsEngCreate.createRCSEngagementWithOnlyContentTags(rcsTestdata.rcsEngageContentTagInput.input.validMandatory[contentTagInput],contentTagInput);
        });
  
        await allure.step("validating",async() => {

          const EngageName = contentTagInput;
          const myConfig = {
            "configureParamTab": {
              "mandatoryParamInput2": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter",
              "contentTagsInput1": rcsTestdata.rcsEngageContentTagInput.input.validMandatory[contentTagInput],
              "contentTagsInput3": rcsTestdata.rcsEngageContentTagInput.input.validMandatory[contentTagInput],
              "contentAttributeInput1": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter",
              "contentAttributeInput3": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter"
            }
          };
          await rcsEngCreate.validating(myConfig,EngageName);

          //await rcsEngCreate.validating("ConfigureParamExpandArrowBtn","mandatoryParamInput2",rcsTestdata.rcsEngageContentTagInput.input.validMandatory[contentTagInput],contentTagInput);
        });
      } catch (error) {
        
      }

    });
  }
  

})


describe.skip ('RCS_testUpdateRCSEngage_OnlyContentTags', function() {

  this.timeout(5000000)
  //let driver
  let vars
  let actions
  let prop
  const EngageName = "RCSEngagmentTet005"
  const SegmentName = "TestsegmentBetween"
  //channellstpge = new channellistpage(driver);
  beforeEach(async function() {
    
    try {
      allure.parameter("login with username: ",testdata.username.input.validusername);
      await allure.step("loginStep",async() => {
        await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
      });
      //await segmentlistpage.selectAndOpenSegment("92864",await this.driver);
      //await channellistpage.clickONChannelTab();
      await allure.step("clickOnChannelTab",async() => {
       // await channellistpage.clickONChannelTab(await driver);
       await channellstpge.clickONChannelTab();
      });
  
      //await channellistpage.clickOnSpecificChannel('RCS');
      await allure.step("clickOnSpecificChannel",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        await channellstpge.clickOnSpecificChannel('RCS');
      });
    } catch (error) {
      console.log(error)
    }
  })
  afterEach(async function() {
      //await this.driver.close();
      await loginpage.log_out(await driver);
  })

  for (const contentTagInput in rcsTestdata.rcsEngageContentTagInput.input.validContentTag) {
    it.skip (`RCS_testUpdateRCSEngage_OnlyContentTags as ${contentTagInput}`, async () => {
   
      this.timeout(5000000)
      /* const engid="";
     // await driver.manage().setTimeouts({implicit: 1000000 });
      //prop = await objt.getObjectRepository();
      //await this.driver.manage().setTimeouts({ implicit: 1000000 });
      allure.parameter("login with username: ",testdata.username.input.validusername);
      await allure.step("loginStep",async() => {
        await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
      });
      //await segmentlistpage.selectAndOpenSegment("92864",await this.driver);
      //await channellistpage.clickONChannelTab();
      await allure.step("clickOnChannelTab",async() => {
       // await channellistpage.clickONChannelTab(await driver);
       await channellstpge.clickONChannelTab();
      });

      //await channellistpage.clickOnSpecificChannel('RCS');
      await allure.step("clickOnSpecificChannel",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        await channellstpge.clickOnSpecificChannel('RCS');
      }); */

      //await channellistpage.clickOnSpecificChannel('RCS');
      /* await allure.step("getEngageId",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        engid = await channellstpge.getEngageId(mandtryParameter);
      }); */

      try {
        //await channellistpage.clickOnSpecificChannel('RCS');
        await allure.step("searchAndOpenEngagement2",async() => {
          //await channellistpage.clickOnSpecificChannel('RCS',await driver);
          await channellstpge.searchAndOpenEngagement2(await channellstpge.getEngageId(contentTagInput));
        });
  
        
        //await rcsEngageCreate.createRCSEngagementWithOnlyMandatoryParam(mandtryParameter);
        allure.parameter("Content Tags: ",rcsTestdata.rcsEngageContentTagInput.input.validMandatory[contentTagInput]);
        await allure.step("updateRCSEngagementWithOnlyContentTags",async() => {
          await rcsEngCreate.updateRCSEngagementWithOnlyContentTags(rcsTestdata.rcsEngageContentTagInput.input.validMandatory[contentTagInput],contentTagInput);
        });

        await allure.step("clickOnSpecificChannel", async() => {
          await channellstpge.clickONChannelTab();
          await channellstpge.clickOnSpecificChannel('RCS');
        });
  
        await allure.step("validating",async() => {

          const EngageName = contentTagInput;
          const myConfig = {
            "configureParamTab": {
              "mandatoryParamInput2": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter",
              "contentTagsInput1": rcsTestdata.rcsEngageContentTagInput.input.validMandatory[contentTagInput],
              "contentTagsInput3": rcsTestdata.rcsEngageContentTagInput.input.validMandatory[contentTagInput],
              "contentAttributeInput1": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter",
              "contentAttributeInput3": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter"
            }
          };
          await rcsEngCreate.validating(myConfig,EngageName);

          //await rcsEngCreate.validating("ConfigureParamExpandArrowBtn","mandatoryParamInput2",rcsTestdata.rcsEngageContentTagInput.input.validMandatory[contentTagInput],contentTagInput);
        });
      } catch (error) {
        
      }

    });
  }
  

})


describe.skip ('RCS_testCopyRCSEngage_OnlyContentTags', function() {

  this.timeout(5000000)
  //let driver
  let vars
  let actions
  let prop
  const EngageName = "RCSEngagmentTet005"
  const SegmentName = "TestsegmentBetween"
  channellstpge = new channellistpage(driver);
  beforeEach(async function() {
    
    try {
      allure.parameter("login with username: ",testdata.username.input.validusername);
      await allure.step("loginStep",async() => {
        await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
      });
      //await segmentlistpage.selectAndOpenSegment("92864",await this.driver);
      //await channellistpage.clickONChannelTab();
      await allure.step("clickOnChannelTab",async() => {
       // await channellistpage.clickONChannelTab(await driver);
       await channellstpge.clickONChannelTab();
      });
  
      //await channellistpage.clickOnSpecificChannel('RCS');
      await allure.step("clickOnSpecificChannel",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        await channellstpge.clickOnSpecificChannel('RCS');
      });
    } catch (error) {
      console.log(error)
    }
  })
  afterEach(async function() {
      //await this.driver.close();
      await loginpage.log_out(await driver);
  })

  for (const contentTagInput in rcsTestdata.rcsEngageContentTagInput.input.validContentTag) {
    it.skip (`RCS_testCopyRCSEngage_OnlyContentTags as ${contentTagInput}`, async () => {
   
      this.timeout(5000000)
      /* const engid="";
     // await driver.manage().setTimeouts({implicit: 1000000 });
      //prop = await objt.getObjectRepository();
      //await this.driver.manage().setTimeouts({ implicit: 1000000 });
      allure.parameter("login with username: ",testdata.username.input.validusername);
      await allure.step("loginStep",async() => {
        await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
      });
      //await segmentlistpage.selectAndOpenSegment("92864",await this.driver);
      //await channellistpage.clickONChannelTab();
      await allure.step("clickOnChannelTab",async() => {
       // await channellistpage.clickONChannelTab(await driver);
       await channellstpge.clickONChannelTab();
      });

      //await channellistpage.clickOnSpecificChannel('RCS');
      await allure.step("clickOnSpecificChannel",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        await channellstpge.clickOnSpecificChannel('RCS');
      }); */

      //await channellistpage.clickOnSpecificChannel('RCS');
      /* await allure.step("getEngageId",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        engid = await channellstpge.getEngageId(mandtryParameter);
      }); */

      try {
        //await channellistpage.clickOnSpecificChannel('RCS');
        await allure.step("searchAndCopyEngagement",async() => {
          //await channellistpage.clickOnSpecificChannel('RCS',await driver);
          await channellstpge.searchAndCopyEngagement(await channellstpge.getEngageId(contentTagInput));
        });
  
        await allure.step("searchAndCopyEngagement",async() => {
          await channellstpge.selectSegment(SegmentName);
        });
  
        
        //await rcsEngageCreate.createRCSEngagementWithOnlyMandatoryParam(mandtryParameter);
        allure.parameter("Content Tags: ",rcsTestdata.rcsEngageContentTagInput.input.validContentTag[contentTagInput]);
        await allure.step("copyRCSEngagementWithOnlyContentTags",async() => {
          await rcsEngCreate.copyRCSEngagementWithOnlyContentTags(rcsTestdata.rcsEngageContentTagInput.input.validContentTag[contentTagInput],contentTagInput);
        });
  
        await allure.step("validating",async() => {

          const EngageName = contentTagInput;
          const myConfig = {
            "configureParamTab": {
              "mandatoryParamInput2": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter",
              "contentTagsInput1": rcsTestdata.rcsEngageContentTagInput.input.validMandatory[contentTagInput],
              "contentTagsInput3": rcsTestdata.rcsEngageContentTagInput.input.validMandatory[contentTagInput],
              "contentAttributeInput1": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter",
              "contentAttributeInput3": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter"
            }
          };
          await rcsEngCreate.validating(myConfig,EngageName);
          //const contentTagObjArray = new Array("contentTagsInput1", "contentTagsInput3");

          //await rcsEngCreate.validating("ConfigureParamExpandArrowBtn",contentTagObjArray,rcsTestdata.rcsEngageContentTagInput.input.validContentTag[contentTagInput],contentTagInput+"cpy");
        });
      } catch (error) {
        
      }
    });
  }
  

})


describe.skip ('RCS_testCreatRCSEngage_OnlyContentAttribute', function() {

  this.timeout(5000000)
  //let driver
  let vars
  let actions
  let prop
  const EngageName = "RCSEngagmentTet005"
  const SegmentName = "TestsegmentBetween"
  //channellstpge = new channellistpage(driver);
  beforeEach(async function() {
    
    try {
      allure.parameter("login with username: ",testdata.username.input.validusername);
      await allure.step("loginStep",async() => {
        await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
      });
      //await segmentlistpage.selectAndOpenSegment("92864",await this.driver);
      //await channellistpage.clickONChannelTab();
      await allure.step("clickOnChannelTab",async() => {
       // await channellistpage.clickONChannelTab(await driver);
       await channellstpge.clickONChannelTab();
      });
  
      //await channellistpage.clickOnSpecificChannel('RCS');
      await allure.step("clickOnSpecificChannel",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        await channellstpge.clickOnSpecificChannel('RCS');
      });
    } catch (error) {
      console.log(error)
    }
  })
  afterEach(async function() {
      //await this.driver.close();
      await loginpage.log_out(await driver);
  })

  for (const contentAttributeInput in rcsTestdata.rcsEngageContentAttributeInput.input.validContentTag) {

    it.skip (`RCS_testCreatRCSEngage_OnlyContentAttribute as ${contentAttributeInput}`, async () => {
   
      this.timeout(5000000)
     // await driver.manage().setTimeouts({implicit: 1000000 });
      //prop = await objt.getObjectRepository();
      //await this.driver.manage().setTimeouts({ implicit: 1000000 });
      /* allure.parameter("login with username: ",testdata.username.input.validusername);
      await allure.step("loginStep",async() => {
        await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
      });
      //await segmentlistpage.selectAndOpenSegment("92864",await this.driver);
      //await channellistpage.clickONChannelTab();
      await allure.step("clickOnChannelTab",async() => {
       // await channellistpage.clickONChannelTab(await driver);
       await channellstpge.clickONChannelTab();
      });

      //await channellistpage.clickOnSpecificChannel('RCS');
      await allure.step("clickOnSpecificChannel",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        await channellstpge.clickOnSpecificChannel('RCS');
      }); */

     try {
       //await channellistpage.clickAddEngagement();
       await allure.step("clickAddEngagement",async() => {
         //await channellistpage.clickOnAddEngBtn(await driver);
         await channellstpge.clickOnAddEngBtn();
       });
 
       //await channellistpage.selectSegment("testsegment-hcl");
       await allure.step("selectSegment",async() => {
         //await channellistpage.selectSegment("testsegment-hcl",await driver);
         await channellstpge.selectSegment(SegmentName);
       });
 
       //await rcsEngageCreate.createRCSEngagementWithOnlyMandatoryParam(mandtryParameter);
       allure.parameter("Content tags: ",rcsTestdata.rcsEngageContentAttributeInput.input.validMandatory[contentAttributeInput]);
       await allure.step("createRCSEngagementWithOnlyContentAttributes",async() => {
         await rcsEngCreate.createRCSEngagementWithOnlyContentAttributes(rcsTestdata.rcsEngageContentAttributeInput.input.validMandatory[contentAttributeInput],contentAttributeInput);
       });
 
       await allure.step("validating",async() => {
        
        const EngageName = contentAttributeInput;
          const myConfig = {
            "configureParamTab": {
              "mandatoryParamInput2": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter",
              "contentTagsInput1": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter",
              "contentTagsInput3": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter",
              "contentAttributeInput1": rcsTestdata.rcsEngageContentAttributeInput.input.validMandatory[contentAttributeInput],
              "contentAttributeInput3": rcsTestdata.rcsEngageContentAttributeInput.input.validMandatory[contentAttributeInput]
            }
          };
          await rcsEngCreate.validating(myConfig,EngageName);
        
        //await rcsEngCreate.validating("ConfigureParamExpandArrowBtn","mandatoryParamInput2",rcsTestdata.rcsEngageContentAttributeInput.input.validMandatory[contentAttributeInput],contentAttributeInput);
       });
     } catch (error) {
      
     }

    });
  }
  

})

describe.skip ('RCS_testUpdateRCSEngage_OnlyContentAttribute', function() {

  this.timeout(5000000)
  //let driver
  let vars
  let actions
  let prop
  const EngageName = "RCSEngagmentTet005"
  const SegmentName = "TestsegmentBetween"
  //channellstpge = new channellistpage(driver);
  beforeEach(async function() {
    
    try {
      allure.parameter("login with username: ",testdata.username.input.validusername);
      await allure.step("loginStep",async() => {
        await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
      });
      //await segmentlistpage.selectAndOpenSegment("92864",await this.driver);
      //await channellistpage.clickONChannelTab();
      await allure.step("clickOnChannelTab",async() => {
       // await channellistpage.clickONChannelTab(await driver);
       await channellstpge.clickONChannelTab();
      });
  
      //await channellistpage.clickOnSpecificChannel('RCS');
      await allure.step("clickOnSpecificChannel",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        await channellstpge.clickOnSpecificChannel('RCS');
      });
    } catch (error) {
      console.log(error)
    }
  })
  afterEach(async function() {
      //await this.driver.close();
      await loginpage.log_out(await driver);
  })

  for (const contentAttributeInput in rcsTestdata.rcsEngageContentAttributeInput.input.validContentTag) {

    it.skip (`RCS_testUpdateRCSEngage_OnlyContentAttribute as ${contentAttributeInput}`, async () => {
   
      this.timeout(5000000)
      /* const engid="";
     // await driver.manage().setTimeouts({implicit: 1000000 });
      //prop = await objt.getObjectRepository();
      //await this.driver.manage().setTimeouts({ implicit: 1000000 });
      allure.parameter("login with username: ",testdata.username.input.validusername);
      await allure.step("loginStep",async() => {
        await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
      });
      //await segmentlistpage.selectAndOpenSegment("92864",await this.driver);
      //await channellistpage.clickONChannelTab();
      await allure.step("clickOnChannelTab",async() => {
       // await channellistpage.clickONChannelTab(await driver);
       await channellstpge.clickONChannelTab();
      });

      //await channellistpage.clickOnSpecificChannel('RCS');
      await allure.step("clickOnSpecificChannel",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        await channellstpge.clickOnSpecificChannel('RCS');
      }); */

      //await channellistpage.clickOnSpecificChannel('RCS');
      /* await allure.step("getEngageId",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        engid = await channellstpge.getEngageId(mandtryParameter);
      }); */

      //await channellistpage.clickOnSpecificChannel('RCS');
      try {
        await allure.step("searchAndOpenEngagement2",async() => {
          //await channellistpage.clickOnSpecificChannel('RCS',await driver);
          await channellstpge.searchAndOpenEngagement2(await channellstpge.getEngageId(contentAttributeInput));
        });
  
        
        //await rcsEngageCreate.createRCSEngagementWithOnlyMandatoryParam(mandtryParameter);
        allure.parameter("Content Attributes: ",rcsTestdata.rcsEngageContentAttributeInput.input.validMandatory[contentAttributeInput]);
        await allure.step("updateRCSEngagementWithOnlyContentAttributes",async() => {
          await rcsEngCreate.updateRCSEngagementWithOnlyContentAttributes(rcsTestdata.rcsEngageContentAttributeInput.input.validMandatory[contentAttributeInput],contentAttributeInput);
        });

        await allure.step("clickOnSpecificChannel", async() => {
          await channellstpge.clickONChannelTab();
          await channellstpge.clickOnSpecificChannel('RCS');
        });
  
        await allure.step("validating",async() => {

          const EngageName = contentAttributeInput;
          const myConfig = {
            "configureParamTab": {
              "mandatoryParamInput2": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter",
              "contentTagsInput1": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter",
              "contentTagsInput3": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter",
              "contentAttributeInput1": rcsTestdata.rcsEngageContentAttributeInput.input.validMandatory[contentAttributeInput],
              "contentAttributeInput3": rcsTestdata.rcsEngageContentAttributeInput.input.validMandatory[contentAttributeInput]
            }
          };
          await rcsEngCreate.validating(myConfig,EngageName);
          //await rcsEngCreate.validating("ConfigureParamExpandArrowBtn","mandatoryParamInput2",rcsTestdata.rcsEngageContentAttributeInput.input.validMandatory[contentAttributeInput],contentAttributeInput);
        }); 
      } catch (error) {
        
      }

    });
  }
  
  

})

describe.skip ('RCS_testCopyRCSEngage_OnlyContentAttribute', function() {

  this.timeout(5000000)
  //let driver
  let vars
  let actions
  let prop
  const EngageName = "RCSEngagmentTet005"
  const SegmentName = "TestsegmentBetween"
  //channellstpge = new channellistpage(driver);
  beforeEach(async function() {
    
    try {
      allure.parameter("login with username: ",testdata.username.input.validusername);
      await allure.step("loginStep",async() => {
        await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
      });
      //await segmentlistpage.selectAndOpenSegment("92864",await this.driver);
      //await channellistpage.clickONChannelTab();
      await allure.step("clickOnChannelTab",async() => {
       // await channellistpage.clickONChannelTab(await driver);
       await channellstpge.clickONChannelTab();
      });
  
      //await channellistpage.clickOnSpecificChannel('RCS');
      await allure.step("clickOnSpecificChannel",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        await channellstpge.clickOnSpecificChannel('RCS');
      });
    } catch (error) {
      console.log(error)
    }
  })
  afterEach(async function() {
      //await this.driver.close();
      await loginpage.log_out(await driver);
  })

  for (const contentAttributeInput in rcsTestdata.rcsEngageContentAttributeInput.input.validContentTag) {

    it.skip (`RCS_testCopyRCSEngage_OnlyContentAttribute as ${contentAttributeInput}`, async () => {
   
      this.timeout(5000000)
      /* const engid="";
     // await driver.manage().setTimeouts({implicit: 1000000 });
      //prop = await objt.getObjectRepository();
      //await this.driver.manage().setTimeouts({ implicit: 1000000 });
      allure.parameter("login with username: ",testdata.username.input.validusername);
      await allure.step("loginStep",async() => {
        await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
      });
      //await segmentlistpage.selectAndOpenSegment("92864",await this.driver);
      //await channellistpage.clickONChannelTab();
      await allure.step("clickOnChannelTab",async() => {
       // await channellistpage.clickONChannelTab(await driver);
       await channellstpge.clickONChannelTab();
      });

      //await channellistpage.clickOnSpecificChannel('RCS');
      await allure.step("clickOnSpecificChannel",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        await channellstpge.clickOnSpecificChannel('RCS');
      }); */

      //await channellistpage.clickOnSpecificChannel('RCS');
      /* await allure.step("getEngageId",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        engid = await channellstpge.getEngageId(mandtryParameter);
      }); */

     try {
       //await channellistpage.clickOnSpecificChannel('RCS');
       await allure.step("searchAndCopyEngagement",async() => {
         //await channellistpage.clickOnSpecificChannel('RCS',await driver);
         await channellstpge.searchAndCopyEngagement(await channellstpge.getEngageId(contentAttributeInput));
       });
 
       await allure.step("searchAndCopyEngagement",async() => {
         await channellstpge.selectSegment(SegmentName);
       });
 
       
       //await rcsEngageCreate.createRCSEngagementWithOnlyMandatoryParam(mandtryParameter);
       allure.parameter("Content Attributes: ",rcsTestdata.rcsEngageContentAttributeInput.input.validContentTag[contentAttributeInput]);
       await allure.step("copyRCSEngagementWithOnlyContentAttributes",async() => {
         await rcsEngCreate.copyRCSEngagementWithOnlyContentAttributes(rcsTestdata.rcsEngageContentAttributeInput.input.validContentTag[contentAttributeInput],contentAttributeInput);
       });
 
       await allure.step("validating",async() => {

        const EngageName = contentAttributeInput;
          const myConfig = {
            "configureParamTab": {
              "mandatoryParamInput2": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter",
              "contentTagsInput1": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter",
              "contentTagsInput3": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter",
              "contentAttributeInput1": rcsTestdata.rcsEngageContentAttributeInput.input.validMandatory[contentAttributeInput],
              "contentAttributeInput3": rcsTestdata.rcsEngageContentAttributeInput.input.validMandatory[contentAttributeInput]
            }
          };
          await rcsEngCreate.validating(myConfig,EngageName);
          
         //const contentTagObjArray = new Array("contentTagsInput1", "contentTagsInput3");
         //await rcsEngCreate.validating("ConfigureParamExpandArrowBtn",contentTagObjArray,rcsTestdata.rcsEngageContentAttributeInput.input.validContentTag[contentAttributeInput],contentAttributeInput+"cpy");
       });  
     } catch (error) {
      
     }

    });
  }
  

})



//================================rcs engagement with content of image type=================================
describe.skip ('RCS_testCreatingRCSEngage_contentTag_Type_Media', function() {

  this.timeout(5000000)
  //let driver
  let vars
  let actions
  let prop
  const EngageName = "RCSEngagmentTet005"
  const SegmentName = "TestsegmentBetween"
  //channellstpge = new channellistpage(driver);
  beforeEach(async function() {
    
    try {
      allure.parameter("login with username: ",testdata.username.input.validusername);
      await allure.step("loginStep",async() => {
        await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
      });
      //await segmentlistpage.selectAndOpenSegment("92864",await this.driver);
      //await channellistpage.clickONChannelTab();
      await allure.step("clickOnChannelTab",async() => {
       // await channellistpage.clickONChannelTab(await driver);
       await channellstpge.clickONChannelTab();
      });
  
      //await channellistpage.clickOnSpecificChannel('RCS');
      await allure.step("clickOnSpecificChannel",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        await channellstpge.clickOnSpecificChannel('RCS');
      });
    } catch (error) {
      
    }
  })
  afterEach(async function() {
      //await this.driver.close();
      await loginpage.log_out(await driver)
  })

  for (const contentTagInput in rcsTestdata.rcsEngageContentTagInput.input.validContentTag) {
    it (`RCS_testCreateRCSEngage_OnlyContentTags as ${contentTagInput}`, async () => {
      
      this.timeout(5000000)

      try {
        //await channellistpage.clickAddEngagement();
        await allure.step("clickAddEngagement",async() => {
          //await channellistpage.clickOnAddEngBtn(await driver);
          await channellstpge.clickOnAddEngBtn();
        });
  
        //await channellistpage.selectSegment("testsegment-hcl");
        await allure.step("selectSegment",async() => {
          //await channellistpage.selectSegment("testsegment-hcl",await driver);
          await channellstpge.selectSegment(SegmentName);
        });
  
        //await rcsEngageCreate.createRCSEngagementWithOnlyMandatoryParam(mandtryParameter);
        allure.parameter("Content tags: ",rcsTestdata.rcsEngageContentTagInput.input.validContentTag[contentTagInput]);
        console.log("input data : "+rcsTestdata.rcsEngageContentTagInput.input.validContentTag[contentTagInput])
        await allure.step("createRCSEngagementWithOnlyContentTags",async() => {
          await rcsEngCreate.createRCSEngagementContentTagsWithImage(rcsTestdata.rcsEngageContentTagInput.input.validContentTag[contentTagInput],contentTagInput);
        });
  
        await allure.step("validating",async() => {

          const EngageName = contentTagInput;
          const myConfig = {
            "configureParamTab": {
              "mandatoryParamInput2": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter",
              "contentTagsInput1": rcsTestdata.rcsEngageContentTagInput.input.validContentTag[contentTagInput],
             // "contentTagsInput3": rcsTestdata.rcsEngageContentTagInput.input.validMandatory[contentTagInput],
              "contentAttributeInput1": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter",
              "contentAttributeInput3": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter"
            }
          };
          await rcsEngCreate.validating(myConfig,EngageName,'out.png');

          //await rcsEngCreate.validating("ConfigureParamExpandArrowBtn","mandatoryParamInput2",rcsTestdata.rcsEngageContentTagInput.input.validMandatory[contentTagInput],contentTagInput);
        });
      } catch (error) {
        console.log(error);
      }

    });
  }


})

describe.skip ('RCS_testUpdatingRCSEngage_contentTag_Type_Media', function() {

  this.timeout(5000000)
  //let driver
  let vars
  let actions
  let prop
  const EngageName = "RCSEngagmentTet005"
  const SegmentName = "TestsegmentBetween"
  //channellstpge = new channellistpage(driver);
  beforeEach(async function() {
    
    try {
      allure.parameter("login with username: ",testdata.username.input.validusername);
      await allure.step("loginStep",async() => {
        await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
      });
      //await segmentlistpage.selectAndOpenSegment("92864",await this.driver);
      //await channellistpage.clickONChannelTab();
      await allure.step("clickOnChannelTab",async() => {
       // await channellistpage.clickONChannelTab(await driver);
       await channellstpge.clickONChannelTab();
      });
  
      //await channellistpage.clickOnSpecificChannel('RCS');
      await allure.step("clickOnSpecificChannel",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        await channellstpge.clickOnSpecificChannel('RCS');
      });
    } catch (error) {
      console.log(error)
    }
  })
  afterEach(async function() {
      //await this.driver.close();
      await loginpage.log_out(await driver);
  })

  for (const contentTagInput in rcsTestdata.rcsEngageContentTagInput.input.validContentTag) {
    it (`RCS_testUpdateRCSEngage_OnlyContentTags as ${contentTagInput}`, async () => {
   
      this.timeout(5000000)
     
      try {
        //await channellistpage.clickOnSpecificChannel('RCS');
        await allure.step("searchAndOpenEngagement2",async() => {
          //await channellistpage.clickOnSpecificChannel('RCS',await driver);
          await channellstpge.searchAndOpenEngagement2(await channellstpge.getEngageId(contentTagInput));
        });
  
        
        //await rcsEngageCreate.createRCSEngagementWithOnlyMandatoryParam(mandtryParameter);
        allure.parameter("Content Tags: ",rcsTestdata.rcsEngageContentTagInput.input.validContentTag[contentTagInput]);
        await allure.step("updateRCSEngagementWithOnlyContentTags",async() => {
          await rcsEngCreate.updateRCSEngagementContentTagsWithImage(rcsTestdata.rcsEngageContentTagInput.input.validContentTag[contentTagInput],contentTagInput);
        });

        await allure.step("clickOnSpecificChannel", async() => {
          await channellstpge.clickONChannelTab();
          await channellstpge.clickOnSpecificChannel('RCS');
        });
  
        await allure.step("validating",async() => {

          const EngageName = contentTagInput;
          const myConfig = {
            "configureParamTab": {
              "mandatoryParamInput2": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter",
              "contentTagsInput1": rcsTestdata.rcsEngageContentTagInput.input.validContentTag[contentTagInput],
              //"contentTagsInput3": rcsTestdata.rcsEngageContentTagInput.input.validMandatory[contentTagInput],
              "contentAttributeInput1": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter",
              "contentAttributeInput3": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter"
            }
          };
          await rcsEngCreate.validating(myConfig,EngageName);

          //await rcsEngCreate.validating("ConfigureParamExpandArrowBtn","mandatoryParamInput2",rcsTestdata.rcsEngageContentTagInput.input.validMandatory[contentTagInput],contentTagInput);
        });
      } catch (error) {
        console.log(error)
      }

    });
  }

})

describe.skip ('RCS_testCopyingRCSEngage_contentTag_Type_Media', function() {

  this.timeout(5000000)
  //let driver
  let vars
  let actions
  let prop
  const EngageName = "RCSEngagmentTet005"
  const SegmentName = "TestsegmentBetween"
  //channellstpge = new channellistpage(driver);
  beforeEach(async function() {
    
    try {
      allure.parameter("login with username: ",testdata.username.input.validusername);
      await allure.step("loginStep",async() => {
        await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
      });
      //await segmentlistpage.selectAndOpenSegment("92864",await this.driver);
      //await channellistpage.clickONChannelTab();
      await allure.step("clickOnChannelTab",async() => {
       // await channellistpage.clickONChannelTab(await driver);
       await channellstpge.clickONChannelTab();
      });
  
      //await channellistpage.clickOnSpecificChannel('RCS');
      await allure.step("clickOnSpecificChannel",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        await channellstpge.clickOnSpecificChannel('RCS');
      });
    } catch (error) {
      console.log(error)
    }
  })
  afterEach(async function() {
      //await this.driver.close();
      await loginpage.log_out(await driver)
  })

  for (const contentTagInput in rcsTestdata.rcsEngageContentTagInput.input.validContentTag) {
    it (`RCS_testCopyRCSEngage_OnlyContentTags as ${contentTagInput}`, async () => {
   
      this.timeout(5000000)
      
      try {
        //await channellistpage.clickOnSpecificChannel('RCS');
        await allure.step("searchAndCopyEngagement",async() => {
          //await channellistpage.clickOnSpecificChannel('RCS',await driver);
          await channellstpge.searchAndCopyEngagement(await channellstpge.getEngageId(contentTagInput));
        });
  
        await allure.step("searchAndCopyEngagement",async() => {
          await channellstpge.selectSegment(SegmentName);
        });
  
        
        //await rcsEngageCreate.createRCSEngagementWithOnlyMandatoryParam(mandtryParameter);
        allure.parameter("Content Tags: ",rcsTestdata.rcsEngageContentTagInput.input.validContentTag[contentTagInput]);
        await allure.step("copyRCSEngagementWithOnlyContentTags",async() => {
          await rcsEngCreate.copyRCSEngagementContentTagsWithImage(rcsTestdata.rcsEngageContentTagInput.input.validContentTag[contentTagInput],contentTagInput);
        });
  
        await allure.step("validating",async() => {

          const EngageName = contentTagInput;
          const myConfig = {
            "configureParamTab": {
              "mandatoryParamInput2": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter",
              "contentTagsInput1": rcsTestdata.rcsEngageContentTagInput.input.validContentTag[contentTagInput],
            //  "contentTagsInput3": rcsTestdata.rcsEngageContentTagInput.input.validMandatory[contentTagInput],
              "contentAttributeInput1": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter",
              "contentAttributeInput3": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter"
            }
          };
          await rcsEngCreate.validating(myConfig,EngageName);
          //const contentTagObjArray = new Array("contentTagsInput1", "contentTagsInput3");

          //await rcsEngCreate.validating("ConfigureParamExpandArrowBtn",contentTagObjArray,rcsTestdata.rcsEngageContentTagInput.input.validContentTag[contentTagInput],contentTagInput+"cpy");
        });
      } catch (error) {
        console.log(error)
      }
    });
  }
})

//=================================================================================================================

describe.skip ('RCS_testCreatRCSEngage_ContentAttribute_Type_Media', function() {

  this.timeout(5000000)
  //let driver
  let vars
  let actions
  let prop
  const EngageName = "RCSEngagmentTet005"
  const SegmentName = "TestsegmentBetween"
  //channellstpge = new channellistpage(driver);
  beforeEach(async function() {
    
    try {
      allure.parameter("login with username: ",testdata.username.input.validusername);
      await allure.step("loginStep",async() => {
        await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
      });
      //await segmentlistpage.selectAndOpenSegment("92864",await this.driver);
      //await channellistpage.clickONChannelTab();
      await allure.step("clickOnChannelTab",async() => {
       // await channellistpage.clickONChannelTab(await driver);
       await channellstpge.clickONChannelTab();
      });
  
      //await channellistpage.clickOnSpecificChannel('RCS');
      await allure.step("clickOnSpecificChannel",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        await channellstpge.clickOnSpecificChannel('RCS');
      });
    } catch (error) {
      console.log(error)
    }
  })
  afterEach(async function() {
      //await this.driver.close();
     await loginpage.log_out(await driver);
  })

  for (const contentAttributeInput in rcsTestdata.rcsEngageContentAttributeInput.input.validContentAttribute) {

    it (`RCS_testCreatRCSEngage_OnlyContentAttribute as ${contentAttributeInput}`, async () => {
   
      this.timeout(5000000)

     try {
       //await channellistpage.clickAddEngagement();
       await allure.step("clickAddEngagement",async() => {
         //await channellistpage.clickOnAddEngBtn(await driver);
         await channellstpge.clickOnAddEngBtn();
       });
 
       //await channellistpage.selectSegment("testsegment-hcl");
       await allure.step("selectSegment",async() => {
         //await channellistpage.selectSegment("testsegment-hcl",await driver);
         await channellstpge.selectSegment(SegmentName);
       });
 
       //await rcsEngageCreate.createRCSEngagementWithOnlyMandatoryParam(mandtryParameter);
       allure.parameter("Content tags: ",rcsTestdata.rcsEngageContentAttributeInput.input.validContentAttribute[contentAttributeInput]);
       await allure.step("createRCSEngagementWithOnlyContentAttributes",async() => {
         await rcsEngCreate.createRCSEngagementWithContentAttributesImage(rcsTestdata.rcsEngageContentAttributeInput.input.validContentAttribute[contentAttributeInput],contentAttributeInput);
       });
 
       await allure.step("validating",async() => {
        
        const EngageName = contentAttributeInput;
          const myConfig = {
            "configureParamTab": {
              "mandatoryParamInput2": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter",
              "contentTagsInput1": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter",
              "contentTagsInput3": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter",
              "contentAttributeInput1": rcsTestdata.rcsEngageContentAttributeInput.input.validContentAttribute[contentAttributeInput],
              //"contentAttributeInput3": rcsTestdata.rcsEngageContentAttributeInput.input.validMandatory[contentAttributeInput]
            }
          };
          await rcsEngCreate.validating(myConfig,EngageName);
        
        //await rcsEngCreate.validating("ConfigureParamExpandArrowBtn","mandatoryParamInput2",rcsTestdata.rcsEngageContentAttributeInput.input.validMandatory[contentAttributeInput],contentAttributeInput);
       });
     } catch (error) {
      
     }

    });
  }
  

})

describe.skip ('RCS_testUpdateRCSEngage_OnlyContentAttribute_Type_Media', function() {

  this.timeout(5000000)
  //let driver
  let vars
  let actions
  let prop
  const EngageName = "RCSEngagmentTet005"
  const SegmentName = "TestsegmentBetween"
  //channellstpge = new channellistpage(driver);
  beforeEach(async function() {
    
    try {
      allure.parameter("login with username: ",testdata.username.input.validusername);
      await allure.step("loginStep",async() => {
        await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
      });
      //await segmentlistpage.selectAndOpenSegment("92864",await this.driver);
      //await channellistpage.clickONChannelTab();
      await allure.step("clickOnChannelTab",async() => {
       // await channellistpage.clickONChannelTab(await driver);
       await channellstpge.clickONChannelTab();
      });
  
      //await channellistpage.clickOnSpecificChannel('RCS');
      await allure.step("clickOnSpecificChannel",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        await channellstpge.clickOnSpecificChannel('RCS');
      });
    } catch (error) {
      console.log(error)
    }
  })
  afterEach(async function() {
      //await this.driver.close();
     await loginpage.log_out(await driver)
  })

  for (const contentAttributeInput in rcsTestdata.rcsEngageContentAttributeInput.input.validContentAttribute) {

    it (`RCS_testUpdateRCSEngage_OnlyContentAttribute as ${contentAttributeInput}`, async () => {
   
      this.timeout(5000000)
      
      try {
        await allure.step("searchAndOpenEngagement2",async() => {
          //await channellistpage.clickOnSpecificChannel('RCS',await driver);
          await channellstpge.searchAndOpenEngagement2(await channellstpge.getEngageId(contentAttributeInput));
        });
  
        
        //await rcsEngageCreate.createRCSEngagementWithOnlyMandatoryParam(mandtryParameter);
        allure.parameter("Content Attributes: ",rcsTestdata.rcsEngageContentAttributeInput.input.validContentAttribute[contentAttributeInput]);
        await allure.step("updateRCSEngagementWithOnlyContentAttributes",async() => {
          await rcsEngCreate.updateRCSEngagementWithOnlyContentAttributesImage(rcsTestdata.rcsEngageContentAttributeInput.input.validContentAttribute[contentAttributeInput],contentAttributeInput);
        });

        await allure.step("clickOnSpecificChannel", async() => {
          await channellstpge.clickONChannelTab();
          await channellstpge.clickOnSpecificChannel('RCS');
        });
  
        await allure.step("validating",async() => {

          const EngageName = contentAttributeInput;
          const myConfig = {
            "configureParamTab": {
              "mandatoryParamInput2": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter",
              "contentTagsInput1": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter",
              "contentTagsInput3": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter",
              "contentAttributeInput1": rcsTestdata.rcsEngageContentAttributeInput.input.validContentAttribute[contentAttributeInput],
              //"contentAttributeInput3": rcsTestdata.rcsEngageContentAttributeInput.input.validMandatory[contentAttributeInput]
            }
          };
          await rcsEngCreate.validating(myConfig,EngageName);
          //await rcsEngCreate.validating("ConfigureParamExpandArrowBtn","mandatoryParamInput2",rcsTestdata.rcsEngageContentAttributeInput.input.validMandatory[contentAttributeInput],contentAttributeInput);
        }); 
      } catch (error) {
        console.log(await driver)
      }

    });
  }
  
  

})

describe.skip ('RCS_testCopyRCSEngage_OnlyContentAttribute_Type_Media', function() {

  this.timeout(5000000)
  //let driver
  let vars
  let actions
  let prop
  const EngageName = "RCSEngagmentTet005"
  const SegmentName = "TestsegmentBetween"
  //channellstpge = new channellistpage(driver);
  beforeEach(async function() {
    
    try {
      allure.parameter("login with username: ",testdata.username.input.validusername);
      await allure.step("loginStep",async() => {
        await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
      });
      //await segmentlistpage.selectAndOpenSegment("92864",await this.driver);
      //await channellistpage.clickONChannelTab();
      await allure.step("clickOnChannelTab",async() => {
       // await channellistpage.clickONChannelTab(await driver);
       await channellstpge.clickONChannelTab();
      });
  
      //await channellistpage.clickOnSpecificChannel('RCS');
      await allure.step("clickOnSpecificChannel",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        await channellstpge.clickOnSpecificChannel('RCS');
      });
    } catch (error) {
      console.log(error)
    }
  })
  afterEach(async function() {
      //await this.driver.close();
     await loginpage.log_out(await driver)
  })

  for (const contentAttributeInput in rcsTestdata.rcsEngageContentAttributeInput.input.validContentAttribute) {

    it (`RCS_testCopyRCSEngage_OnlyContentAttribute as ${contentAttributeInput}`, async () => {
   
      this.timeout(5000000)
     
     try {
       //await channellistpage.clickOnSpecificChannel('RCS');
       await allure.step("searchAndCopyEngagement",async() => {
         //await channellistpage.clickOnSpecificChannel('RCS',await driver);
         await channellstpge.searchAndCopyEngagement(await channellstpge.getEngageId(contentAttributeInput));
       });
 
       await allure.step("searchAndCopyEngagement",async() => {
         await channellstpge.selectSegment(SegmentName);
       });
 
       
       //await rcsEngageCreate.createRCSEngagementWithOnlyMandatoryParam(mandtryParameter);
       allure.parameter("Content Attributes: ",rcsTestdata.rcsEngageContentAttributeInput.input.validContentAttribute[contentAttributeInput]);
       await allure.step("copyRCSEngagementWithOnlyContentAttributes",async() => {
         await rcsEngCreate.copyRCSEngagementWithOnlyContentAttributesImage(rcsTestdata.rcsEngageContentAttributeInput.input.validContentAttribute[contentAttributeInput],contentAttributeInput);
       });
 
       await allure.step("validating",async() => {

        const EngageName = contentAttributeInput;
          const myConfig = {
            "configureParamTab": {
              "mandatoryParamInput2": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter",
              "contentTagsInput1": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter",
              "contentTagsInput3": "123456contentTags-_=+!@#$%^&*123456contentTagsparameter",
              "contentAttributeInput1": rcsTestdata.rcsEngageContentAttributeInput.input.validContentAttribute[contentAttributeInput],
              //"contentAttributeInput3": rcsTestdata.rcsEngageContentAttributeInput.input.validMandatory[contentAttributeInput]
            }
          };
          await rcsEngCreate.validating(myConfig,EngageName);
          
         //const contentTagObjArray = new Array("contentTagsInput1", "contentTagsInput3");
         //await rcsEngCreate.validating("ConfigureParamExpandArrowBtn",contentTagObjArray,rcsTestdata.rcsEngageContentAttributeInput.input.validContentTag[contentAttributeInput],contentAttributeInput+"cpy");
       });  
     } catch (error) {
        console.error(error)
     }

    });
  }
  

})


//====================================extra working testcases============================================

describe.skip ('Second Testing Creation of rcs engagement from channel flow', function() {
  this.timeout(5000000)
  //let driver
  let vars
  let actions
  let prop
  const EngageName = "RCSEngagmentTet005"
  const SegmentName = "TestsegmentBetween"
  channellstpge = new channellistpage(driver);
  beforeEach(async function() {
   // driver = await new Builder().forBrowser('chrome').build()
      // Navigate to the login page
   // vars = {}
  // EngageName = "RCSEngagmentTet001"
  })
  afterEach(async function() {
      //await this.driver.close();
  })

  it.skip ('RCS_testCreatRCSEngageofGoalTypeTrack', async function() {
   
    this.timeout(1000000)
    //prop = await objt.getObjectRepository();
    //await this.driver.manage().setTimeouts({ implicit: 1000000 });
    await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
    //await segmentlistpage.selectAndOpenSegment("92864",await this.driver);
    await channellistpage.clickONChannelTab();
    await channellistpage.clickOnSpecificChannel('RCS');
    await channellistpage.clickAddEngagement();
    await channellistpage.selectSegment(SegmentName);
    await rcsEngageCreate.createRCSEngagementOfGoalTypeTrack(EngageName);
  })

  it.skip ('RCS_testUpdatingRCSEngageofGoalTypeTrack', async function() {
   
    this.timeout(1000000)
    
    await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
  
    await channellistpage.clickONChannelTab();
    await channellistpage.clickOnSpecificChannel('RCS');
    const engagementId = await channellistpage.getEngageId(EngageName);
    await channellistpage.searchAndOpenEngagement(engagementId);
    await rcsEngageCreate.updateRCSEngagementOfGoalTypeTrack("Application Backgrounded");
  })

  it.skip ('RCS_testCopyingRCSEngageofGoalTypeTrack', async function() {
   
    this.timeout(1000000)
    
    await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
    
    await channellistpage.clickONChannelTab();
    await channellistpage.clickOnSpecificChannel('RCS');
    const engagementId = await channellistpage.getEngageId(EngageName);
    console.log("Engagement id is : "+engagementId);
    await channellistpage.searchAndCopyEngagement(engagementId);
    await channellistpage.selectSegment(SegmentName);
    await rcsEngageCreate.copyRCSEngagementOfGoalTypeTrack("Application Backgrounded");

  })


  it.skip ('RCS_testCreatRCSEngageofGoalTypePage', async function() {
   
    this.timeout(1000000)
    //prop = await objt.getObjectRepository();
    //await this.driver.manage().setTimeouts({ implicit: 1000000 });
    await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
    //await segmentlistpage.selectAndOpenSegment("92864",await this.driver);
    await channellistpage.clickONChannelTab();
    await channellistpage.clickOnSpecificChannel('RCS');
    await channellistpage.clickAddEngagement();
    await channellistpage.selectSegment(SegmentName);
    await rcsEngageCreate.createRCSEngagementOfGoalTypePage("https://www.iciciprulife.com");
  })

  it.skip ('RCS_testUpdatingRCSEngageofGoalTypePage', async function() {
   
    this.timeout(1000000)
   // prop = await objt.getObjectRepository();
   // await this.driver.manage().setTimeouts({ implicit: 1000000 });
    await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
    //await segmentlistpage.selectAndOpenSegment("92864",await this.driver);
    await channellistpage.clickONChannelTab();
    await channellistpage.clickOnSpecificChannel('RCS');
    const engagementId = await channellistpage.getEngageId(EngageName);
    await channellistpage.searchAndOpenEngagement(engagementId); 
    await rcsEngageCreate.updateRCSEngagementOfGoalTypePage("https://www.google.com");
  })

  it.skip ('RCS_testCopyingRCSEngageofGoalTypePage', async function() {
   
    this.timeout(1000000)
   // prop = await objt.getObjectRepository();
   // await this.driver.manage().setTimeouts({ implicit: 1000000 });
    await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
    //await segmentlistpage.selectAndOpenSegment("92864",await this.driver);
    await channellistpage.clickONChannelTab();
    await channellistpage.clickOnSpecificChannel('RCS');
    const engagementId = await channellistpage.getEngageId(EngageName);
    console.log("Engagement id is : "+engagementId);
    await channellistpage.searchAndCopyEngagement(engagementId);
    await channellistpage.selectSegment(SegmentName);
    await rcsEngageCreate.copyRCSEngagementOfGoalTypePage("https://www.goog16le.com");

  })



  it.skip('RCS_testCreatRCSEngageofGoalTypeNone', async function() {
   
    this.timeout(1000000)
    prop = await objt.getObjectRepository();
    await this.driver.manage().setTimeouts({ implicit: 1000000 });
    await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await this.driver);
    //await segmentlistpage.selectAndOpenSegment("92864",await this.driver);
    await channellistpage.clickONChannelTab();
    await channellistpage.clickOnSpecificChannel('RCS');
    await channellistpage.clickAddEngagement();
    await channellistpage.selectSegment("testsegment-hcl");
    await rcsEngageCreate.createRCSEngagementOfGoalTypeNone();
    
  })


  for (const mandtryParameter in rcsTestdata.rcsEngageInput.input.validMandatory) {


    it.skip (`RCS_testCreatRCSEngage_OnlyMandatoryParam as ${mandtryParameter}`, async() => {
    
      this.timeout(5000000)
     // await driver.manage().setTimeouts({implicit: 1000000 });
      //prop = await objt.getObjectRepository();
      //await this.driver.manage().setTimeouts({ implicit: 1000000 });
      allure.parameter("login with username: ",testdata.username.input.validusername);
      await allure.step("loginStep",async() => {
        await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
      });
      //await segmentlistpage.selectAndOpenSegment("92864",await this.driver);
      //await channellistpage.clickONChannelTab();
      await allure.step("clickOnChannelTab",async() => {
       // await channellistpage.clickONChannelTab(await driver);
       await channellstpge.clickONChannelTab();
      });

      //await channellistpage.clickOnSpecificChannel('RCS');
      await allure.step("clickOnSpecificChannel",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        await channellstpge.clickOnSpecificChannel('RCS');
      });

      //await channellistpage.clickAddEngagement();
      await allure.step("clickAddEngagement",async() => {
        //await channellistpage.clickOnAddEngBtn(await driver);
        await channellstpge.clickOnAddEngBtn();
      });

      //await channellistpage.selectSegment("testsegment-hcl");
      await allure.step("selectSegment",async() => {
        //await channellistpage.selectSegment("testsegment-hcl",await driver);
        await channellstpge.selectSegment(SegmentName);
      });

      //await rcsEngageCreate.createRCSEngagementWithOnlyMandatoryParam(mandtryParameter);
      allure.parameter("Mandatory Parameter: ",testdata.rcsEngageInput.input.validMandatory[mandtryParameter]);
      await allure.step("createRCSEngagementWithOnlyMandatoryParam",async() => {
        await rcsEngCreate.createRCSEngagementWithOnlyMandatoryParam(rcsTestdata.rcsEngageInput.input.validMandatory[mandtryParameter],mandtryParameter);
      });

      await allure.step("validating",async() => {
        await rcsEngCreate.validating("ConfigureParamExpandArrowBtn","mandatoryParamInput2",rcsTestdata.rcsEngageInput.input.validMandatory[mandtryParameter],mandtryParameter);
      });

      /* await allure.step("logOut",async() => {
        await loginpage.log_out(await driver)
      }); */

    });

  }
 /*  it('RCS_testCreatRCSEngage_OnlyMandatoryParam', async function() {
   
    this.timeout(1000000)
    prop = await objt.getObjectRepository();
    await this.driver.manage().setTimeouts({ implicit: 1000000 });
    await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await this.driver);
    //await segmentlistpage.selectAndOpenSegment("92864",await this.driver);
    await channellistpage.clickONChannelTab();
    await channellistpage.clickOnSpecificChannel('RCS');
    await channellistpage.clickAddEngagement();
    await channellistpage.selectSegment("testsegment-hcl");
    await rcsEngageCreate.createRCSEngagementWithOnlyMandatoryParam();
  }) */

  for (const mandtryParameter in rcsTestdata.rcsEngageInput.input.validMandatory) {

    it.skip (`RCS_testUpdateRCSEngage_OnlyMandatoryParam as ${mandtryParameter}`, async() => {
    
      this.timeout(5000000)
      const engid="";
     // await driver.manage().setTimeouts({implicit: 1000000 });
      //prop = await objt.getObjectRepository();
      //await this.driver.manage().setTimeouts({ implicit: 1000000 });
      allure.parameter("login with username: ",testdata.username.input.validusername);
      await allure.step("loginStep",async() => {
        await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
      });
      //await segmentlistpage.selectAndOpenSegment("92864",await this.driver);
      //await channellistpage.clickONChannelTab();
      await allure.step("clickOnChannelTab",async() => {
       // await channellistpage.clickONChannelTab(await driver);
       await channellstpge.clickONChannelTab();
      });

      //await channellistpage.clickOnSpecificChannel('RCS');
      await allure.step("clickOnSpecificChannel",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        await channellstpge.clickOnSpecificChannel('RCS');
      });

      //await channellistpage.clickOnSpecificChannel('RCS');
      /* await allure.step("getEngageId",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        engid = await channellstpge.getEngageId(mandtryParameter);
      }); */

      //await channellistpage.clickOnSpecificChannel('RCS');
      await allure.step("searchAndOpenEngagement2",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        await channellstpge.searchAndOpenEngagement2(await channellstpge.getEngageId(mandtryParameter));
      });

      
      //await rcsEngageCreate.createRCSEngagementWithOnlyMandatoryParam(mandtryParameter);
      allure.parameter("Mandatory Parameter: ",rcsTestdata.rcsEngageInput.input.validMandatory[mandtryParameter]);
      await allure.step("updateRCSEngagementWithOnlyMandatoryParam",async() => {
        await rcsEngCreate.updateRCSEngagementWithOnlyMandatoryParam(rcsTestdata.rcsEngageInput.input.validMandatory[mandtryParameter],mandtryParameter);
      });

      await allure.step("validating",async() => {
        await rcsEngCreate.validating("ConfigureParamExpandArrowBtn","mandatoryParamInput2",rcsTestdata.rcsEngageInput.input.validMandatory[mandtryParameter],mandtryParameter);
      });

    });

  }


  for (const mandtryParameter in rcsTestdata.rcsEngageInput.input.validMandatory) {

    it (`RCS_testCopyRCSEngage_OnlyMandatoryParam as ${mandtryParameter}`, async() => {
    
      this.timeout(5000000)
      const engid="";
     // await driver.manage().setTimeouts({implicit: 1000000 });
      //prop = await objt.getObjectRepository();
      //await this.driver.manage().setTimeouts({ implicit: 1000000 });
      allure.parameter("login with username: ",testdata.username.input.validusername);
      await allure.step("loginStep",async() => {
        await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
      });
      //await segmentlistpage.selectAndOpenSegment("92864",await this.driver);
      //await channellistpage.clickONChannelTab();
      await allure.step("clickOnChannelTab",async() => {
       // await channellistpage.clickONChannelTab(await driver);
       await channellstpge.clickONChannelTab();
      });

      //await channellistpage.clickOnSpecificChannel('RCS');
      await allure.step("clickOnSpecificChannel",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        await channellstpge.clickOnSpecificChannel('RCS');
      });

      //await channellistpage.clickOnSpecificChannel('RCS');
      /* await allure.step("getEngageId",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        engid = await channellstpge.getEngageId(mandtryParameter);
      }); */

      //await channellistpage.clickOnSpecificChannel('RCS');
      await allure.step("searchAndCopyEngagement",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        await channellstpge.searchAndCopyEngagement(await channellstpge.getEngageId(mandtryParameter));
      });

      await allure.step("searchAndCopyEngagement",async() => {
        await channellstpge.selectSegment(SegmentName);
      });

      
      //await rcsEngageCreate.createRCSEngagementWithOnlyMandatoryParam(mandtryParameter);
      allure.parameter("Mandatory Parameter: ",rcsTestdata.rcsEngageInput.input.validMandatory[mandtryParameter]);
      await allure.step("copyRCSEngagementWithOnlyMandatoryParam",async() => {
        await rcsEngCreate.copyRCSEngagementWithOnlyMandatoryParam(rcsTestdata.rcsEngageInput.input.validMandatory[mandtryParameter],mandtryParameter);
      });

      await allure.step("validating",async() => {
        await rcsEngCreate.validating("ConfigureParamExpandArrowBtn","mandatoryParamInput2",rcsTestdata.rcsEngageInput.input.validMandatory[mandtryParameter],mandtryParameter+"cpy");
      });

    });

  }


  for (const contentTagInput in rcsTestdata.rcsEngageContentTagInput.input.validContentTag) {
    it.skip (`RCS_testCreateRCSEngage_OnlyContentTags as ${contentTagInput}`, async () => {
      
      this.timeout(5000000)
     // await driver.manage().setTimeouts({implicit: 1000000 });
      //prop = await objt.getObjectRepository();
      //await this.driver.manage().setTimeouts({ implicit: 1000000 });
      allure.parameter("login with username: ",testdata.username.input.validusername);
      await allure.step("loginStep",async() => {
        await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
      });
      //await segmentlistpage.selectAndOpenSegment("92864",await this.driver);
      //await channellistpage.clickONChannelTab();
      await allure.step("clickOnChannelTab",async() => {
       // await channellistpage.clickONChannelTab(await driver);
       await channellstpge.clickONChannelTab();
      });

      //await channellistpage.clickOnSpecificChannel('RCS');
      await allure.step("clickOnSpecificChannel",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        await channellstpge.clickOnSpecificChannel('RCS');
      });

      //await channellistpage.clickAddEngagement();
      await allure.step("clickAddEngagement",async() => {
        //await channellistpage.clickOnAddEngBtn(await driver);
        await channellstpge.clickOnAddEngBtn();
      });

      //await channellistpage.selectSegment("testsegment-hcl");
      await allure.step("selectSegment",async() => {
        //await channellistpage.selectSegment("testsegment-hcl",await driver);
        await channellstpge.selectSegment(SegmentName);
      });

      //await rcsEngageCreate.createRCSEngagementWithOnlyMandatoryParam(mandtryParameter);
      allure.parameter("Content tags: ",rcsTestdata.rcsEngageContentTagInput.input.validMandatory[contentTagInput]);
      await allure.step("createRCSEngagementWithOnlyContentTags",async() => {
        await rcsEngCreate.createRCSEngagementWithOnlyContentTags(rcsTestdata.rcsEngageContentTagInput.input.validMandatory[contentTagInput],contentTagInput);
      });

      await allure.step("validating",async() => {
        await rcsEngCreate.validating("ConfigureParamExpandArrowBtn","mandatoryParamInput2",rcsTestdata.rcsEngageContentTagInput.input.validMandatory[contentTagInput],contentTagInput);
      });

    });
  }


  for (const contentTagInput in rcsTestdata.rcsEngageContentTagInput.input.validContentTag) {
    it.skip (`RCS_testUpdateRCSEngage_OnlyContentTags as ${contentTagInput}`, async () => {
   
      this.timeout(5000000)
      const engid="";
     // await driver.manage().setTimeouts({implicit: 1000000 });
      //prop = await objt.getObjectRepository();
      //await this.driver.manage().setTimeouts({ implicit: 1000000 });
      allure.parameter("login with username: ",testdata.username.input.validusername);
      await allure.step("loginStep",async() => {
        await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
      });
      //await segmentlistpage.selectAndOpenSegment("92864",await this.driver);
      //await channellistpage.clickONChannelTab();
      await allure.step("clickOnChannelTab",async() => {
       // await channellistpage.clickONChannelTab(await driver);
       await channellstpge.clickONChannelTab();
      });

      //await channellistpage.clickOnSpecificChannel('RCS');
      await allure.step("clickOnSpecificChannel",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        await channellstpge.clickOnSpecificChannel('RCS');
      });

      //await channellistpage.clickOnSpecificChannel('RCS');
      /* await allure.step("getEngageId",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        engid = await channellstpge.getEngageId(mandtryParameter);
      }); */

      //await channellistpage.clickOnSpecificChannel('RCS');
      await allure.step("searchAndOpenEngagement2",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        await channellstpge.searchAndOpenEngagement2(await channellstpge.getEngageId(contentTagInput));
      });

      
      //await rcsEngageCreate.createRCSEngagementWithOnlyMandatoryParam(mandtryParameter);
      allure.parameter("Content Tags: ",rcsTestdata.rcsEngageContentTagInput.input.validMandatory[contentTagInput]);
      await allure.step("updateRCSEngagementWithOnlyContentTags",async() => {
        await rcsEngCreate.updateRCSEngagementWithOnlyContentTags(rcsTestdata.rcsEngageContentTagInput.input.validMandatory[contentTagInput],contentTagInput);
      });

      await allure.step("validating",async() => {
        await rcsEngCreate.validating("ConfigureParamExpandArrowBtn","mandatoryParamInput2",rcsTestdata.rcsEngageContentTagInput.input.validMandatory[contentTagInput],contentTagInput);
      });

    });
  }

  for (const contentTagInput in rcsTestdata.rcsEngageContentTagInput.input.validContentTag) {
    it.skip (`RCS_testCopyRCSEngage_OnlyContentTags as ${contentTagInput}`, async () => {
   
      this.timeout(5000000)
      const engid="";
     // await driver.manage().setTimeouts({implicit: 1000000 });
      //prop = await objt.getObjectRepository();
      //await this.driver.manage().setTimeouts({ implicit: 1000000 });
      allure.parameter("login with username: ",testdata.username.input.validusername);
      await allure.step("loginStep",async() => {
        await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
      });
      //await segmentlistpage.selectAndOpenSegment("92864",await this.driver);
      //await channellistpage.clickONChannelTab();
      await allure.step("clickOnChannelTab",async() => {
       // await channellistpage.clickONChannelTab(await driver);
       await channellstpge.clickONChannelTab();
      });

      //await channellistpage.clickOnSpecificChannel('RCS');
      await allure.step("clickOnSpecificChannel",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        await channellstpge.clickOnSpecificChannel('RCS');
      });

      //await channellistpage.clickOnSpecificChannel('RCS');
      /* await allure.step("getEngageId",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        engid = await channellstpge.getEngageId(mandtryParameter);
      }); */

      //await channellistpage.clickOnSpecificChannel('RCS');
      await allure.step("searchAndCopyEngagement",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        await channellstpge.searchAndCopyEngagement(await channellstpge.getEngageId(contentTagInput));
      });

      await allure.step("searchAndCopyEngagement",async() => {
        await channellstpge.selectSegment(SegmentName);
      });

      
      //await rcsEngageCreate.createRCSEngagementWithOnlyMandatoryParam(mandtryParameter);
      allure.parameter("Content Tags: ",rcsTestdata.rcsEngageContentTagInput.input.validContentTag[contentTagInput]);
      await allure.step("copyRCSEngagementWithOnlyContentTags",async() => {
        await rcsEngCreate.copyRCSEngagementWithOnlyContentTags(rcsTestdata.rcsEngageContentTagInput.input.validContentTag[contentTagInput],contentTagInput);
      });

      await allure.step("validating",async() => {
        const contentTagObjArray = new Array("contentTagsInput1", "contentTagsInput3");
        await rcsEngCreate.validating("ConfigureParamExpandArrowBtn",contentTagObjArray,rcsTestdata.rcsEngageContentTagInput.input.validContentTag[contentTagInput],contentTagInput+"cpy");
      });
    });
  }



  

  for (const contentAttributeInput in rcsTestdata.rcsEngageContentAttributeInput.input.validContentTag) {

    it.skip (`RCS_testCreatRCSEngage_OnlyContentAttribute as ${contentAttributeInput}`, async () => {
   
      this.timeout(5000000)
     // await driver.manage().setTimeouts({implicit: 1000000 });
      //prop = await objt.getObjectRepository();
      //await this.driver.manage().setTimeouts({ implicit: 1000000 });
      allure.parameter("login with username: ",testdata.username.input.validusername);
      await allure.step("loginStep",async() => {
        await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
      });
      //await segmentlistpage.selectAndOpenSegment("92864",await this.driver);
      //await channellistpage.clickONChannelTab();
      await allure.step("clickOnChannelTab",async() => {
       // await channellistpage.clickONChannelTab(await driver);
       await channellstpge.clickONChannelTab();
      });

      //await channellistpage.clickOnSpecificChannel('RCS');
      await allure.step("clickOnSpecificChannel",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        await channellstpge.clickOnSpecificChannel('RCS');
      });

      //await channellistpage.clickAddEngagement();
      await allure.step("clickAddEngagement",async() => {
        //await channellistpage.clickOnAddEngBtn(await driver);
        await channellstpge.clickOnAddEngBtn();
      });

      //await channellistpage.selectSegment("testsegment-hcl");
      await allure.step("selectSegment",async() => {
        //await channellistpage.selectSegment("testsegment-hcl",await driver);
        await channellstpge.selectSegment(SegmentName);
      });

      //await rcsEngageCreate.createRCSEngagementWithOnlyMandatoryParam(mandtryParameter);
      allure.parameter("Content tags: ",rcsTestdata.rcsEngageContentAttributeInput.input.validMandatory[contentAttributeInput]);
      await allure.step("createRCSEngagementWithOnlyContentAttributes",async() => {
        await rcsEngCreate.createRCSEngagementWithOnlyContentAttributes(rcsTestdata.rcsEngageContentAttributeInput.input.validMandatory[contentAttributeInput],contentAttributeInput);
      });

      await allure.step("validating",async() => {
        await rcsEngCreate.validating("ConfigureParamExpandArrowBtn","mandatoryParamInput2",rcsTestdata.rcsEngageContentAttributeInput.input.validMandatory[contentAttributeInput],contentAttributeInput);
      });

    });
  }


  for (const contentAttributeInput in rcsTestdata.rcsEngageContentAttributeInput.input.validContentTag) {

    it.skip (`RCS_testUpdateRCSEngage_OnlyContentAttribute as ${contentAttributeInput}`, async () => {
   
      this.timeout(5000000)
      const engid="";
     // await driver.manage().setTimeouts({implicit: 1000000 });
      //prop = await objt.getObjectRepository();
      //await this.driver.manage().setTimeouts({ implicit: 1000000 });
      allure.parameter("login with username: ",testdata.username.input.validusername);
      await allure.step("loginStep",async() => {
        await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
      });
      //await segmentlistpage.selectAndOpenSegment("92864",await this.driver);
      //await channellistpage.clickONChannelTab();
      await allure.step("clickOnChannelTab",async() => {
       // await channellistpage.clickONChannelTab(await driver);
       await channellstpge.clickONChannelTab();
      });

      //await channellistpage.clickOnSpecificChannel('RCS');
      await allure.step("clickOnSpecificChannel",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        await channellstpge.clickOnSpecificChannel('RCS');
      });

      //await channellistpage.clickOnSpecificChannel('RCS');
      /* await allure.step("getEngageId",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        engid = await channellstpge.getEngageId(mandtryParameter);
      }); */

      //await channellistpage.clickOnSpecificChannel('RCS');
      await allure.step("searchAndOpenEngagement2",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        await channellstpge.searchAndOpenEngagement2(await channellstpge.getEngageId(contentAttributeInput));
      });

      
      //await rcsEngageCreate.createRCSEngagementWithOnlyMandatoryParam(mandtryParameter);
      allure.parameter("Content Attributes: ",rcsTestdata.rcsEngageContentAttributeInput.input.validMandatory[contentAttributeInput]);
      await allure.step("updateRCSEngagementWithOnlyContentAttributes",async() => {
        await rcsEngCreate.updateRCSEngagementWithOnlyContentAttributes(rcsTestdata.rcsEngageContentAttributeInput.input.validMandatory[contentAttributeInput],contentAttributeInput);
      });

      await allure.step("validating",async() => {
        await rcsEngCreate.validating("ConfigureParamExpandArrowBtn","mandatoryParamInput2",rcsTestdata.rcsEngageContentAttributeInput.input.validMandatory[contentAttributeInput],contentAttributeInput);
      }); 

    });
  }



  for (const contentAttributeInput in rcsTestdata.rcsEngageContentAttributeInput.input.validContentTag) {

    it.skip (`RCS_testCopyRCSEngage_OnlyContentAttribute as ${contentAttributeInput}`, async () => {
   
      this.timeout(5000000)
      const engid="";
     // await driver.manage().setTimeouts({implicit: 1000000 });
      //prop = await objt.getObjectRepository();
      //await this.driver.manage().setTimeouts({ implicit: 1000000 });
      allure.parameter("login with username: ",testdata.username.input.validusername);
      await allure.step("loginStep",async() => {
        await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
      });
      //await segmentlistpage.selectAndOpenSegment("92864",await this.driver);
      //await channellistpage.clickONChannelTab();
      await allure.step("clickOnChannelTab",async() => {
       // await channellistpage.clickONChannelTab(await driver);
       await channellstpge.clickONChannelTab();
      });

      //await channellistpage.clickOnSpecificChannel('RCS');
      await allure.step("clickOnSpecificChannel",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        await channellstpge.clickOnSpecificChannel('RCS');
      });

      //await channellistpage.clickOnSpecificChannel('RCS');
      /* await allure.step("getEngageId",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        engid = await channellstpge.getEngageId(mandtryParameter);
      }); */

      //await channellistpage.clickOnSpecificChannel('RCS');
      await allure.step("searchAndCopyEngagement",async() => {
        //await channellistpage.clickOnSpecificChannel('RCS',await driver);
        await channellstpge.searchAndCopyEngagement(await channellstpge.getEngageId(contentAttributeInput));
      });

      await allure.step("searchAndCopyEngagement",async() => {
        await channellstpge.selectSegment(SegmentName);
      });

      
      //await rcsEngageCreate.createRCSEngagementWithOnlyMandatoryParam(mandtryParameter);
      allure.parameter("Content Attributes: ",rcsTestdata.rcsEngageContentAttributeInput.input.validContentTag[contentAttributeInput]);
      await allure.step("copyRCSEngagementWithOnlyContentAttributes",async() => {
        await rcsEngCreate.copyRCSEngagementWithOnlyContentAttributes(rcsTestdata.rcsEngageContentAttributeInput.input.validContentTag[contentAttributeInput],contentAttributeInput);
      });

      await allure.step("validating",async() => {
        const contentTagObjArray = new Array("contentTagsInput1", "contentTagsInput3");
        await rcsEngCreate.validating("ConfigureParamExpandArrowBtn",contentTagObjArray,rcsTestdata.rcsEngageContentAttributeInput.input.validContentTag[contentAttributeInput],contentAttributeInput+"cpy");
      });  

    });
  }

  
})


