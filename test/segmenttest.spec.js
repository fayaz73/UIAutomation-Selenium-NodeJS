// Generated by Selenium IDE
const { Builder, By, WebElementCondition,Capabilities, until, Actions } = require("selenium-webdriver")
const testdata = require('./../objects/testData')
const assert = require("assert")
const loginpage = require('../pageobjects/loginpage');
const segmentlistpage = require('../pageobjects/segmentlistpage');
const segmentCreationPage = require('../pageobjects/segmentCreationPage');
const objt = require('../operations/ReadObjects');
const opertn = require('../operations/UIOperations');

let driver;

before(async function(){
    this.timeout(1000000)
    //this.driver = await BasePage.driver;
    //this.driver = await segmentCreationPage.driver;
    //  driver = await segmentCreationPage.driver;
    driver = await loginpage.driver;
    //await this.driver.manage().setTimeouts({ implicit: 100000 });
    //await driver.get("https://ttl.lemnisk.co/app/login/")
    //await driver.get("https://cdp.lemnisk.co/app/login/")

    /* await this.driver.get(testdata.url.input.validurl)
    await this.driver.manage().window().setRect({ width: 1848, height: 1053 }) */
    await loginpage.enter_url(testdata.url.input.validurl);
    //await driver.get(testdata.url.input.validurl)
    await driver.manage().window().setRect({ width: 1848, height: 1053 })
    return await driver;
});

/* 
after(async function() {
  //await this.driver.quit();
  //await driver.quit();
}); */

describe('Testing Creation of Segment', function() {
  this.timeout(100000)
  //let driver
  let vars
  let actions
  let prop
  beforeEach(async function() {
   // driver = await new Builder().forBrowser('chrome').build()
      // Navigate to the login page
   // vars = {}
  })
  

  it.skip ('segmentlist_addSegmentBtn_test', async function() {
   
    /* this.timeout(100000)
    prop = await objt.getObjectRepository();
    await this.driver.manage().setTimeouts({ implicit: 100000 });
    await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await this.driver);
    await segmentlistpage.clickONAddSementBtn(testdata.username.input.validusername, testdata.password.input.validpassword,await this.driver);
    await segmentCreationPage.createSegment(testdata.username.input.validusername, testdata.password.input.validpassword,await this.driver);
    await segmentCreationPage.clickSegBreadCrum(testdata.username.input.validusername, testdata.password.input.validpassword,await this.driver); */


    this.timeout(1000000)
    //prop = await objt.getObjectRepository();
    //await driver.manage().setTimeouts({ implicit: 100000 });
    await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
    await segmentlistpage.clickONAddSementBtn(await driver);
    await segmentCreationPage.createSegment(await driver);
    await segmentCreationPage.clickSegBreadCrum(await driver);

  })

  it.skip ('segmentlist_testSegmentWithSameName', async function() {
   
    /* this.timeout(100000)
    //prop = await objt.getObjectRepository();
    await this.driver.manage().setTimeouts({ implicit: 1000000 });
    //await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await this.driver);
    //await segmentlistpage.clickONAddSementBtn(testdata.username.input.validusername, testdata.password.input.validpassword,await this.driver);
    await segmentCreationPage.createSegmentWithSameName(testdata.username.input.validusername, testdata.password.input.validpassword,await this.driver);
    await segmentCreationPage.clickSegBreadCrum(testdata.username.input.validusername, testdata.password.input.validpassword,await this.driver); */


    this.timeout(1000000)
    //prop = await objt.getObjectRepository();
    //await driver.manage().setTimeouts({ implicit: 1000000 });
    await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);

    //console.log("next iteration");

    await segmentlistpage.clickONAddSementBtn(await driver);
    await segmentCreationPage.createSegmentWithSameName(await driver);
    await segmentCreationPage.clickSegBreadCrum(await driver);
    
    
  })

  
  it ('segmentlist_testDeletingAllSegmentRules', async function() {
   
    this.timeout(100000)
    /* //prop = await objt.getObjectRepository();
    //await this.driver.manage().setTimeouts({ implicit: 1000000 });
    //await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
    await segmentlistpage.clickONAddSementBtn(testdata.username.input.validusername, testdata.password.input.validpassword,await this.driver);
    await segmentCreationPage.testDeleteAllRulesInSeg(testdata.username.input.validusername, testdata.password.input.validpassword,await this.driver);
    await segmentCreationPage.clickSegBreadCrum(testdata.username.input.validusername, testdata.password.input.validpassword,await this.driver); */

    //prop = await objt.getObjectRepository();
    //await this.driver.manage().setTimeouts({ implicit: 1000000 });
    await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
    await segmentlistpage.clickONAddSementBtn(await driver);
    await segmentCreationPage.testDeleteAllRulesInSeg(await driver);
    await segmentCreationPage.clickSegBreadCrum(await driver);

  })

  it ('segmentlist_testSegCreationWithOutRules', async function() {
   
    this.timeout(100000)
   /* // prop = await objt.getObjectRepository();
    //await this.driver.manage().setTimeouts({ implicit: 1000000 });
    await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
    await segmentlistpage.clickONAddSementBtn(testdata.username.input.validusername, testdata.password.input.validpassword,await this.driver);
    await segmentCreationPage.testSegCreationWithOutRule(testdata.username.input.validusername, testdata.password.input.validpassword,await this.driver);
    await segmentCreationPage.clickSegBreadCrum(testdata.username.input.validusername, testdata.password.input.validpassword,await this.driver); */

    await loginpage.log_in(testdata.username.input.validusername, testdata.password.input.validpassword,await driver);
    await segmentlistpage.clickONAddSementBtn(await driver);
    await segmentCreationPage.testSegCreationWithOutRule(await driver);
    await segmentCreationPage.clickSegBreadCrum(await driver);
    
  })



})
